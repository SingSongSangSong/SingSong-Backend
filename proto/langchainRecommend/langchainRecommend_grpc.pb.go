// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.0
// source: proto/langchainRecommend/langchainRecommend.proto

package langchainRecommend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LangchainRecommendClient is the client API for LangchainRecommend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LangchainRecommendClient interface {
	GetLangchainRecommendation(ctx context.Context, in *LangchainRequest, opts ...grpc.CallOption) (*LangchainResponse, error)
}

type langchainRecommendClient struct {
	cc grpc.ClientConnInterface
}

func NewLangchainRecommendClient(cc grpc.ClientConnInterface) LangchainRecommendClient {
	return &langchainRecommendClient{cc}
}

func (c *langchainRecommendClient) GetLangchainRecommendation(ctx context.Context, in *LangchainRequest, opts ...grpc.CallOption) (*LangchainResponse, error) {
	out := new(LangchainResponse)
	err := c.cc.Invoke(ctx, "/langchainRecommend.LangchainRecommend/GetLangchainRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LangchainRecommendServer is the server API for LangchainRecommend service.
// All implementations must embed UnimplementedLangchainRecommendServer
// for forward compatibility
type LangchainRecommendServer interface {
	GetLangchainRecommendation(context.Context, *LangchainRequest) (*LangchainResponse, error)
	mustEmbedUnimplementedLangchainRecommendServer()
}

// UnimplementedLangchainRecommendServer must be embedded to have forward compatible implementations.
type UnimplementedLangchainRecommendServer struct {
}

func (UnimplementedLangchainRecommendServer) GetLangchainRecommendation(context.Context, *LangchainRequest) (*LangchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLangchainRecommendation not implemented")
}
func (UnimplementedLangchainRecommendServer) mustEmbedUnimplementedLangchainRecommendServer() {}

// UnsafeLangchainRecommendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LangchainRecommendServer will
// result in compilation errors.
type UnsafeLangchainRecommendServer interface {
	mustEmbedUnimplementedLangchainRecommendServer()
}

func RegisterLangchainRecommendServer(s grpc.ServiceRegistrar, srv LangchainRecommendServer) {
	s.RegisterService(&LangchainRecommend_ServiceDesc, srv)
}

func _LangchainRecommend_GetLangchainRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LangchainRecommendServer).GetLangchainRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/langchainRecommend.LangchainRecommend/GetLangchainRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LangchainRecommendServer).GetLangchainRecommendation(ctx, req.(*LangchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LangchainRecommend_ServiceDesc is the grpc.ServiceDesc for LangchainRecommend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LangchainRecommend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "langchainRecommend.LangchainRecommend",
	HandlerType: (*LangchainRecommendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLangchainRecommendation",
			Handler:    _LangchainRecommend_GetLangchainRecommendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/langchainRecommend/langchainRecommend.proto",
}
