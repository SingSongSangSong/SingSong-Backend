name: Build and Deploy to ECS

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
      ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      TASK_DEFINITION_NAME: ${{ secrets.TASK_DEFINITION_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          platforms: linux/amd64,linux/arm64

      - name: Download Task Definition Template
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION_NAME }} \
            --query taskDefinition \
            > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Add environment variables to the task definition
        run: |
          jq '.containerDefinitions[0].environment += [
            {"name":"SERVER_MODE","value":"prod"},
            {"name":"PINECONE_API_KEY","value":"${{ secrets.PINECONE_API_KEY }}"},
            {"name":"PINECONE_INDEX","value":"${{ secrets.PINECONE_INDEX }}"},
            {"name":"DB_HOST","value":"${{ vars.RDS_HOST }}"},
            {"name":"DB_PORT","value":"${{ vars.RDS_PORT }}"},
            {"name":"DB_NAME","value":"${{ secrets.DB_NAME }}"},
            {"name":"DB_USER","value":"${{ vars.RDS_USER }}"},
            {"name":"DB_PASSWORD","value":"${{ vars.RDS_PASSWORD }}"},
            {"name":"REDIS_ADDR","value":"${{ vars.ELASTICACHE_ADDR }}"},
            {"name":"REDIS_PORT","value":"${{ vars.ELASTICACHE_PORT }}"},
            {"name":"REDIS_PASSWORD","value":""},
            {"name":"SECRET_KEY","value":"${{ secrets.SECRET_KEY }}"},
            {"name":"KAKAO_REST_API_KEY","value":"${{ secrets.KAKAO_PROD_API_KEY }}"},
            {"name":"KAKAO_ISSUER","value":"${{ secrets.KAKAO_ISSUER }}"},
            {"name":"JWT_ISSUER","value":"${{ secrets.JWT_ISSUER }}"},
            {"name":"JWT_ACCESS_VALIDITY_SECONDS","value":"${{ secrets.JWT_ACCESS_VALIDITY_SECONDS }}"},
            {"name":"JWT_REFRESH_VALIDITY_SECONDS","value":"${{ secrets.JWT_REFRESH_VALIDITY_SECONDS }}"}
          ]' task-definition.json > new-task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: new-task-definition.json
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
