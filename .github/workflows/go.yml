name: Go

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          platforms: linux/amd64,linux/arm64
          build-args: |
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            PINECONE_INDEX=${{ secrets.PINECONE_INDEX }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_ADDR=${{ secrets.REDIS_ADDR }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
            KAKAO_ISSUER=${{ secrets.KAKAO_ISSUER }}
            JWT_ISSUER=${{ secrets.JWT_ISSUER }}
            JWT_ACCESS_VALIDITY_SECONDS=${{ secrets.JWT_ACCESS_VALIDITY_SECONDS }}
            JWT_REFRESH_VALIDITY_SECONDS=${{ secrets.JWT_REFRESH_VALIDITY_SECONDS }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install -y sshpass

      - name: Connect to Raspberry Pi and manage Docker container
        env:
          PI_HOST: ${{ secrets.PI_HOST }}
          PI_USER: ${{ secrets.PI_USER }}
          PI_PASSWORD: ${{ secrets.PI_PASSWORD }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
        run: |
          sshpass -p $PI_PASSWORD ssh -o StrictHostKeyChecking=no $PI_USER@$PI_HOST << EOF
          echo "Connected to Raspberry Pi"
          CONTAINER_ID=\$(docker ps -q -f ancestor=$DOCKER_IMAGE)
          if [ "\$CONTAINER_ID" ]; then
            echo "Stopping and removing existing container"
            docker stop \$CONTAINER_ID
            docker rm \$CONTAINER_ID
          fi
          echo "Pruning Docker system"
          docker system prune -f
          echo "Pulling latest Docker image"
          docker pull $DOCKER_IMAGE
          echo "Running new Docker container"
          docker run -d -p 8080:8080 $DOCKER_IMAGE
          EOF

      - name: Verify Docker container
        env:
          PI_HOST: ${{ secrets.PI_HOST }}
          PI_USER: ${{ secrets.PI_USER }}
          PI_PASSWORD: ${{ secrets.PI_PASSWORD }}
        run: |
          sshpass -p $PI_PASSWORD ssh -o StrictHostKeyChecking=no $PI_USER@$PI_HOST "docker ps"