basePath: /api
definitions:
  handler.ChartResponse:
    properties:
      artistName:
        type: string
      isMr:
        type: integer
      new:
        type: string
      ranking:
        type: integer
      rankingChange:
        type: integer
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
      totalScore:
        type: number
    type: object
  handler.CommentRequest:
    properties:
      content:
        type: string
      isRecomment:
        type: boolean
      parentCommentId:
        type: integer
      songId:
        type: integer
    type: object
  handler.CommentResponse:
    properties:
      commentId:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      isLiked:
        type: boolean
      isRecomment:
        type: boolean
      likes:
        type: integer
      memberId:
        type: integer
      nickname:
        type: string
      parentCommentId:
        type: integer
      recomments:
        items:
          $ref: '#/definitions/handler.CommentResponse'
        type: array
      songId:
        type: integer
    type: object
  handler.FunctionCallingDetailResponse:
    properties:
      album:
        type: string
      commentCount:
        type: integer
      isKeep:
        type: boolean
      isLive:
        type: boolean
      isMr:
        type: boolean
      keepCount:
        type: integer
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.FunctionCallingResponse:
    properties:
      songs:
        items:
          $ref: '#/definitions/handler.FunctionCallingDetailResponse'
        type: array
    type: object
  handler.GetPostCommentResponse:
    properties:
      lastCursor:
        type: integer
      postComments:
        items:
          $ref: '#/definitions/handler.PostCommentResponse'
        type: array
      totalPostCommentCount:
        type: integer
    type: object
  handler.GetPostReCommentResponse:
    properties:
      lastCursor:
        type: integer
      postReComments:
        items:
          $ref: '#/definitions/handler.PostCommentResponse'
        type: array
    type: object
  handler.LangchainAgentResponse:
    properties:
      songs:
        items:
          $ref: '#/definitions/handler.songsLangchainAgentesponse'
        type: array
    type: object
  handler.LatestCommentResponse:
    properties:
      commentId:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      isLiked:
        type: boolean
      isRecomment:
        type: boolean
      likes:
        type: integer
      memberId:
        type: integer
      nickname:
        type: string
      parentCommentId:
        type: integer
      song:
        $ref: '#/definitions/handler.SongOfLatestComment'
    type: object
  handler.LlmRequest:
    properties:
      userInput:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      birthYear:
        type: string
      gender:
        type: string
      idToken:
        type: string
      provider:
        type: string
    type: object
  handler.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  handler.LoginV2ExtraInfoRequest:
    properties:
      birthYear:
        type: integer
      gender:
        type: string
    type: object
  handler.LoginV2Request:
    properties:
      idToken:
        type: string
      provider:
        type: string
    type: object
  handler.LoginV2Response:
    properties:
      accessToken:
        type: string
      isInfoRequired:
        type: boolean
      refreshToken:
        type: string
    type: object
  handler.MemberResponse:
    properties:
      birthYear:
        type: integer
      email:
        type: string
      gender:
        type: string
      nickname:
        type: string
    type: object
  handler.PlaylistAddRequest:
    properties:
      songId:
        items:
          type: integer
        type: array
    type: object
  handler.PlaylistAddResponse:
    properties:
      album:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.PostCommentReportResponse:
    properties:
      postCommentId:
        type: integer
      postReportId:
        type: integer
      postReporterId:
        type: integer
      reason:
        type: string
      subjectMemberId:
        type: integer
    type: object
  handler.PostCommentRequest:
    properties:
      content:
        type: string
      isRecomment:
        type: boolean
      parentCommentId:
        type: integer
      postId:
        type: integer
      songIds:
        items:
          type: integer
        type: array
    type: object
  handler.PostCommentResponse:
    properties:
      content:
        type: string
      createdAt:
        type: string
      isLiked:
        type: boolean
      isRecomment:
        type: boolean
      likes:
        type: integer
      memberId:
        type: integer
      nickname:
        type: string
      parentPostCommentId:
        type: integer
      postCommentId:
        type: integer
      postId:
        type: integer
      postRecommentsCount:
        type: integer
      songOnPostComment:
        items:
          $ref: '#/definitions/handler.SongOnPost'
        type: array
    type: object
  handler.PostDetailsResponse:
    properties:
      content:
        type: string
      createdAt:
        type: string
      isLiked:
        type: boolean
      isWriter:
        type: boolean
      likes:
        type: integer
      memberId:
        type: integer
      nickname:
        type: string
      postId:
        type: integer
      songs:
        items:
          $ref: '#/definitions/handler.SongOnPost'
        type: array
      title:
        type: string
    type: object
  handler.PostIdResponse:
    properties:
      postId:
        type: integer
    type: object
  handler.PostReportRequest:
    properties:
      reason:
        type: string
      subjectMemberId:
        type: integer
    type: object
  handler.PostRequest:
    properties:
      content:
        type: string
      songIds:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  handler.ReissueRequest:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  handler.ReportRequest:
    properties:
      commentId:
        type: integer
      reason:
        type: string
      subjectMemberId:
        type: integer
    type: object
  handler.ReportResponse:
    properties:
      commentId:
        type: integer
      reason:
        type: string
      reportId:
        type: integer
      reporterId:
        type: integer
      subjectMemberId:
        type: integer
    type: object
  handler.SearchResultForLLMResponse:
    properties:
      searchTexts:
        items:
          type: string
        type: array
    type: object
  handler.SongDeleteFromPlaylistRequest:
    properties:
      songIds:
        items:
          type: integer
        type: array
    type: object
  handler.SongOfLatestComment:
    properties:
      album:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.SongOnPost:
    properties:
      album:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.TotalChartResponse:
    properties:
      female:
        items:
          $ref: '#/definitions/handler.ChartResponse'
        type: array
      gender:
        type: string
      male:
        items:
          $ref: '#/definitions/handler.ChartResponse'
        type: array
      time:
        type: string
    type: object
  handler.UpdateNicknameRequest:
    properties:
      nickname:
        type: string
    type: object
  handler.V2ChartOfKey:
    properties:
      chartKey:
        type: string
      songs:
        items:
          $ref: '#/definitions/handler.V2ChartSong'
        type: array
    type: object
  handler.V2ChartSong:
    properties:
      album:
        type: string
      artistName:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      isNew:
        type: boolean
      melonLink:
        type: string
      ranking:
        type: integer
      rankingChange:
        type: integer
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
      totalScore:
        type: number
    type: object
  handler.V2TotalChartResponse:
    properties:
      ageGroup:
        type: string
      charts:
        items:
          $ref: '#/definitions/handler.V2ChartOfKey'
        type: array
      gender:
        type: string
      time:
        type: string
      userKey:
        type: string
    type: object
  handler.WithdrawRequest:
    properties:
      refreshToken:
        type: string
    type: object
  handler.blacklistRequest:
    properties:
      memberId:
        type: integer
    type: object
  handler.blacklistResponse:
    properties:
      blockDate:
        type: string
      memberId:
        type: integer
      nickname:
        type: string
    type: object
  handler.deleteBlacklistRequest:
    properties:
      memberIds:
        items:
          type: integer
        type: array
    type: object
  handler.homeRequest:
    properties:
      tags:
        items:
          type: string
        type: array
    type: object
  handler.homeResponse:
    properties:
      songs:
        items:
          $ref: '#/definitions/handler.songHomeResponse'
        type: array
      tag:
        type: string
    type: object
  handler.latestVersionUpdateRequest:
    properties:
      forceUpdate:
        type: boolean
      platform:
        type: string
      version:
        type: string
    type: object
  handler.newSongInfo:
    properties:
      album:
        type: string
      commentCount:
        type: integer
      isKeep:
        type: boolean
      isLive:
        type: boolean
      isMr:
        type: boolean
      isRecentlyUpdated:
        type: boolean
      keepCount:
        type: integer
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.newSongInfoResponse:
    properties:
      lastCursor:
        type: integer
      songs:
        items:
          $ref: '#/definitions/handler.newSongInfo'
        type: array
    type: object
  handler.refreshRequest:
    properties:
      tag:
        type: string
    type: object
  handler.refreshResponse:
    properties:
      album:
        type: string
      commentCount:
        type: integer
      isKeep:
        type: boolean
      isLive:
        type: boolean
      isMr:
        type: boolean
      keepCount:
        type: integer
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.relatedSong:
    properties:
      album:
        type: string
      isKeep:
        type: boolean
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.relatedSongResponse:
    properties:
      nextPage:
        type: integer
      songs:
        items:
          $ref: '#/definitions/handler.relatedSong'
        type: array
    type: object
  handler.songHomeResponse:
    properties:
      album:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.songInfoResponse:
    properties:
      album:
        type: string
      commentCount:
        type: integer
      description:
        type: string
      isKeep:
        type: boolean
      isLive:
        type: boolean
      isMr:
        type: boolean
      keepCount:
        type: integer
      melonLink:
        type: string
      octave:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
      tags:
        items:
          type: string
        type: array
    type: object
  handler.songResponse:
    properties:
      album:
        type: string
      commentCount:
        type: integer
      isKeep:
        type: boolean
      isLive:
        type: boolean
      isMr:
        type: boolean
      keepCount:
        type: integer
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.songReviewOptionAddRequest:
    properties:
      enum:
        type: string
      title:
        type: string
    type: object
  handler.songReviewOptionGetResponse:
    properties:
      count:
        type: integer
      selected:
        type: boolean
      songReviewOptionId:
        type: integer
      title:
        type: string
    type: object
  handler.songReviewOptionPutRequest:
    properties:
      songReviewOptionId:
        type: integer
    type: object
  handler.songSearchInfoResponse:
    properties:
      album:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.songSearchInfoResponses:
    properties:
      artistName:
        items:
          $ref: '#/definitions/handler.songSearchInfoResponse'
        type: array
      songName:
        items:
          $ref: '#/definitions/handler.songSearchInfoResponse'
        type: array
      songNumber:
        items:
          $ref: '#/definitions/handler.songSearchInfoResponse'
        type: array
    type: object
  handler.songSearchPageResponse:
    properties:
      nextPage:
        type: integer
      songs:
        items:
          $ref: '#/definitions/handler.songSearchInfoResponse'
        type: array
    type: object
  handler.songsLangchainAgentesponse:
    properties:
      album:
        type: string
      isLive:
        type: boolean
      isMr:
        type: boolean
      melonLink:
        type: string
      reason:
        type: string
      singerName:
        type: string
      songId:
        type: integer
      songName:
        type: string
      songNumber:
        type: integer
    type: object
  handler.userProfileResponse:
    properties:
      songs:
        items:
          $ref: '#/definitions/handler.songResponse'
        type: array
    type: object
  handler.versionCheckRequest:
    properties:
      version:
        type: string
    type: object
  pkg.BaseResponseStruct:
    properties:
      data: {}
      message:
        type: string
    type: object
info:
  contact: {}
  title: 싱송생송 API
  version: "1.0"
paths:
  /v1/blacklist:
    delete:
      consumes:
      - application/json
      description: memberId를 통해 차단해제하기
      parameters:
      - description: deleteBlacklistRequest
        in: body
        name: deleteBlacklistRequest
        required: true
        schema:
          $ref: '#/definitions/handler.deleteBlacklistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
      security:
      - BearerAuth: []
      summary: memberId를 통해 차단해제하기
      tags:
      - Blacklist
    get:
      consumes:
      - application/json
      description: memberId를 통해 차단 목록 조회하
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.blacklistResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: memberId를 통해 차단 목록 조회하기
      tags:
      - Blacklist
    post:
      consumes:
      - application/json
      description: memberId를 통해 차단하기
      parameters:
      - description: blacklistRequest
        in: body
        name: blacklistRequest
        required: true
        schema:
          $ref: '#/definitions/handler.blacklistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
      security:
      - BearerAuth: []
      summary: memberId를 통해 차단하기
      tags:
      - Blacklist
  /v1/chart:
    get:
      consumes:
      - application/json
      description: 인기차트 조회
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.TotalChartResponse'
                  type: array
              type: object
        "400":
          description: 실패
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: 인기차트 조회
      tags:
      - Chart
  /v1/comment:
    post:
      consumes:
      - application/json
      description: SongId에 댓글 달기
      parameters:
      - description: commentRequest
        in: body
        name: CommentRequest
        required: true
        schema:
          $ref: '#/definitions/handler.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.CommentResponse'
              type: object
      security:
      - BearerAuth: []
      summary: SongId에 댓글 달기
      tags:
      - Comment
  /v1/comment/{commentId}/like:
    post:
      consumes:
      - application/json
      description: 해당하는 댓글에 좋아요 누르기
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      security:
      - BearerAuth: []
      summary: 해당하는 댓글에 좋아요 누르기
      tags:
      - Comment
  /v1/comment/{songId}:
    get:
      consumes:
      - application/json
      description: Get comments for a specific song identified by songId
      parameters:
      - description: Song ID
        in: path
        name: songId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.CommentResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Retrieve comments for the specified SongId
      tags:
      - Comment
  /v1/comment/latest:
    get:
      consumes:
      - application/json
      description: 홈화면 최신 댓글 가져오기. 쿼리 파라미터인 size를 별도로 지정하지 않으면 default size = 5
      parameters:
      - description: size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.LatestCommentResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: 홈화면 최신 댓글 가져오기
      tags:
      - Comment
  /v1/comment/recomment/{commentId}:
    get:
      consumes:
      - application/json
      description: Get reComments for a specific comment identified by commentId
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.CommentResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Retrieve reComments for the specified CommentId
      tags:
      - Comment
  /v1/comment/report:
    post:
      consumes:
      - application/json
      description: 해당하는 댓글ID를 통해 신고하기
      parameters:
      - description: ReportRequest
        in: body
        name: ReportRequest
        required: true
        schema:
          $ref: '#/definitions/handler.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.ReportResponse'
              type: object
      security:
      - BearerAuth: []
      summary: 해당하는 댓글ID를 통해 신고하기
      tags:
      - Comment
  /v1/keep:
    delete:
      consumes:
      - application/json
      description: 노래들을 하나씩 플레이리스트에서 삭제한다
      parameters:
      - description: 노래 리스트
        in: body
        name: SongDeleteFromPlaylistRequest
        required: true
        schema:
          $ref: '#/definitions/handler.SongDeleteFromPlaylistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.PlaylistAddResponse'
              type: object
      security:
      - BearerAuth: []
      summary: 플레이리스트에 노래를 제거한다
      tags:
      - Playlist
    get:
      consumes:
      - application/json
      description: 플레이리스트에 있는 노래들을 가져온다
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.PlaylistAddResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: 플레이리스트에 노래를 가져온다
      tags:
      - Playlist
    post:
      consumes:
      - application/json
      description: 노래들을 하나씩 플레이리스트에 추가한 후 적용된 플레이리스트의 노래들을 리턴한다
      parameters:
      - description: 노래 리스트
        in: body
        name: PlaylistAddRequest
        required: true
        schema:
          $ref: '#/definitions/handler.PlaylistAddRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.PlaylistAddResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: 플레이리스트에 노래를 추가한다
      tags:
      - Playlist
  /v1/member:
    get:
      consumes:
      - application/json
      description: 사용자 정보 조회
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.MemberResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Member의 정보를 가져온다
      tags:
      - Member
  /v1/member/login:
    post:
      consumes:
      - application/json
      description: IdToken을 이용한 회원가입 및 로그인
      parameters:
      - description: idToken 및 Provider
        in: body
        name: songs
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.LoginResponse'
              type: object
      summary: 회원가입 및 로그인
      tags:
      - Signup and Login
  /v1/member/logout:
    post:
      consumes:
      - application/json
      description: 멤버 회원 로그아웃
      parameters:
      - description: refreshToken
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/handler.WithdrawRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      security:
      - BearerAuth: []
      summary: 멤버 회원 로그아웃
      tags:
      - Member
  /v1/member/nickname:
    patch:
      consumes:
      - application/json
      description: Nickname 업데이트 한다
      parameters:
      - description: 닉네임
        in: body
        name: updateNicknameRequest
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateNicknameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.MemberResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Nickname 업데이트 한다
      tags:
      - Member
  /v1/member/reissue:
    post:
      consumes:
      - application/json
      description: AccessToken 재발급 및 RefreshToken 재발급 (RTR Refresh Token Rotation)
      parameters:
      - description: accessToken 및 refreshToken
        in: body
        name: songs
        required: true
        schema:
          $ref: '#/definitions/handler.ReissueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.LoginResponse'
              type: object
      summary: AccessToken RefreshToken 재발급
      tags:
      - Reissue
  /v1/member/withdraw:
    post:
      consumes:
      - application/json
      description: 멤버 회원 탈퇴
      parameters:
      - description: refreshToken
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/handler.WithdrawRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      security:
      - BearerAuth: []
      summary: 멤버 회원 탈퇴
      tags:
      - Member
  /v1/posts:
    get:
      consumes:
      - application/json
      description: 게시글 전체 조회 (커서 기반 페이징)
      parameters:
      - description: 마지막에 조회했던 커서의 postId(이전 요청에서 lastCursor값을 주면 됨), 없다면 default로
          가장 최신 글부터 조회
        in: query
        name: cursor
        type: integer
      - description: 한번에 조회할 게시글 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.PostDetailsResponse'
              type: object
        "400":
          description: query param 값이 들어왔는데, 숫자가 아니라면 400 실패
        "500":
          description: 서버 에러일 경우 500 실패
      summary: 게시글 전체 조회 (커서 기반 페이징)
      tags:
      - Post
    post:
      consumes:
      - application/json
      description: 게시글 등록
      parameters:
      - description: PostRequest
        in: body
        name: PostRequest
        required: true
        schema:
          $ref: '#/definitions/handler.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.PostIdResponse'
              type: object
        "400":
          description: PostRequest가 올바르지 않은 경우, 엑세스 토큰은 유효하지만 사용자 정보가 유효하지 않은 경우,
            노래 id가 중복되거나 10개 초과인 경우 400 실패
        "401":
          description: 엑세스 토큰 검증에 실패했을 경우 401 실패
        "500":
          description: 서버 에러일 경우 500 실패
      security:
      - BearerAuth: []
      summary: 게시글 등록
      tags:
      - Post
  /v1/posts/{postId}:
    delete:
      consumes:
      - application/json
      description: 게시글 하나 삭제
      parameters:
      - description: postId
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
        "400":
          description: postId가 요청에 없는 경우, 해당 게시글이 존재하지 않는 경우, 게시글 작성자가 아닌 경우 400 실패
        "401":
          description: 사용자 인증에 실패했을 경우 401 실패
        "500":
          description: 서버 에러일 경우 500 실패
      security:
      - BearerAuth: []
      summary: 게시글 하나 삭제
      tags:
      - Post
    get:
      consumes:
      - application/json
      description: 게시글 하나 상세 조회
      parameters:
      - description: postId
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.PostDetailsResponse'
              type: object
        "400":
          description: postId가 요청에 없는 경우, 해당 게시글이 존재하지 않는 경우 400 실패
        "401":
          description: 엑세스 토큰 검증에 실패했을 경우 401 실패
        "500":
          description: 서버 에러일 경우 500 실패
      security:
      - BearerAuth: []
      summary: 게시글 하나 상세 조회
      tags:
      - Post
  /v1/posts/{postId}/comments:
    get:
      consumes:
      - application/json
      description: Get comments for a specific post identified by postId with optional
        page and size query parameters
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: 마지막에 조회했던 커서의 postCommentId(이전 요청에서 lastCursor값을 주면 됨), 없다면 default로
          가장 먼저 작성된 댓글부터 조회
        in: query
        name: cursor
        type: integer
      - description: 한번에 조회할 게시글 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.GetPostCommentResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Retrieve comments for the specified postId
      tags:
      - Post
  /v1/posts/{postId}/likes:
    post:
      consumes:
      - application/json
      description: 해당하는 게시글에 좋아요 누르기
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: integer
              type: object
      security:
      - BearerAuth: []
      summary: 해당하는 게시글에 좋아요 누르기
      tags:
      - Post
  /v1/posts/{postId}/reports:
    post:
      consumes:
      - application/json
      description: 게시글 신고
      parameters:
      - description: postId
        in: path
        name: postId
        required: true
        type: string
      - description: PostReportRequest
        in: body
        name: PostReportRequest
        required: true
        schema:
          $ref: '#/definitions/handler.PostReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
        "400":
          description: postId param이 잘못 들어왔거나, body 형식이 올바르지 않다면 400 실패
        "500":
          description: 서버 에러일 경우 500 실패
      security:
      - BearerAuth: []
      summary: 게시글 신고
      tags:
      - Post
  /v1/posts/comments:
    post:
      consumes:
      - application/json
      description: PostId에 댓글 달기
      parameters:
      - description: postCommentRequest
        in: body
        name: PostCommentRequest
        required: true
        schema:
          $ref: '#/definitions/handler.PostCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.PostCommentResponse'
              type: object
      security:
      - BearerAuth: []
      summary: PostId에 댓글 달기
      tags:
      - Post
  /v1/posts/comments/{postCommentId}/like:
    post:
      consumes:
      - application/json
      description: 해당하는 댓글에 좋아요 누르기
      parameters:
      - description: postCommentId
        in: path
        name: postCommentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      security:
      - BearerAuth: []
      summary: 해당하는 댓글에 좋아요 누르기
      tags:
      - Post
  /v1/posts/comments/{postCommentId}/recomments:
    get:
      consumes:
      - application/json
      description: Get rePostComments for a specific comment identified by postCommentId
      parameters:
      - description: postCommentId
        in: path
        name: postCommentId
        required: true
        type: string
      - description: 마지막에 조회했던 커서의 postCommentId(이전 요청에서 lastCursor값을 주면 됨), 없다면 default로
          가장 먼저 작성된 댓글부터 조회
        in: query
        name: cursor
        type: integer
      - description: 한번에 조회할 게시글 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.GetPostReCommentResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Retrieve rePostComments for the specified PostCommentId
      tags:
      - Post
  /v1/posts/comments/report:
    post:
      consumes:
      - application/json
      description: 해당하는 댓글ID를 통해 신고하기
      parameters:
      - description: ReportRequest
        in: body
        name: ReportRequest
        required: true
        schema:
          $ref: '#/definitions/handler.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.PostCommentReportResponse'
              type: object
      security:
      - BearerAuth: []
      summary: 해당하는 댓글ID를 통해 신고하기
      tags:
      - Post
  /v1/recommend/home:
    post:
      consumes:
      - application/json
      description: 태그에 해당하는 노래를 추천합니다.
      parameters:
      - description: 태그 목록
        in: body
        name: songs
        required: true
        schema:
          $ref: '#/definitions/handler.homeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.homeResponse'
                  type: array
              type: object
      summary: 노래 추천 by 태그
      tags:
      - Recommendation
  /v1/recommend/recommendation/{pageId}:
    get:
      consumes:
      - application/json
      description: 사용자의 프로필을 기반으로 추천된 노래를 반환합니다. 페이지당 20개의 노래를 반환합니다.
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.userProfileResponse'
              type: object
      security:
      - BearerAuth: []
      summary: AI가 골랐송
      tags:
      - Recommendation
  /v1/recommend/recommendation/ai:
    get:
      consumes:
      - application/json
      description: 사용자의 프로필을 기반으로 추천된 노래를 반환합니다. 페이지당 20개의 노래를 반환합니다.
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.userProfileResponse'
              type: object
      security:
      - BearerAuth: []
      summary: AI가 골랐송
      tags:
      - Recommendation
  /v1/recommend/recommendation/functionCalling:
    post:
      consumes:
      - application/json
      description: LLM의 사용자 입력을 토대로 추천된 노래를 반환합니다. 10개의 노래를 반환합니다
      parameters:
      - description: 인풋
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LlmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.FunctionCallingResponse'
              type: object
      security:
      - BearerAuth: []
      summary: LLM으로 검색하기
      tags:
      - Recommendation
  /v1/recommend/recommendation/langchainAgent:
    post:
      consumes:
      - application/json
      description: LLM의 사용자 입력을 토대로 추천된 노래를 반환합니다. 10개의 노래를 반환합니다
      parameters:
      - description: 인풋
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LlmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.LangchainAgentResponse'
              type: object
      security:
      - BearerAuth: []
      summary: LLM으로 검색하기
      tags:
      - Recommendation
  /v1/recommend/recommendation/llm:
    post:
      consumes:
      - application/json
      description: LLM의 사용자 입력을 토대로 추천된 노래를 반환합니다. 5개의 노래를 반환합니다
      parameters:
      - description: 인풋
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LlmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.userProfileResponse'
              type: object
      security:
      - BearerAuth: []
      summary: LLM으로 검색하기
      tags:
      - Recommendation
  /v1/recommend/recommendation/searchLog:
    get:
      consumes:
      - application/json
      description: Get Recent 10 Search Results and provide Random 3 Search Texts
        for LLM
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.SearchResultForLLMResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get 3 Recent Search Results for LLM
      tags:
      - Recommendation
  /v1/recommend/refresh:
    post:
      consumes:
      - application/json
      description: 태그에 해당하는 노래를 새로고침합니다.
      parameters:
      - description: 태그
        in: body
        name: songs
        required: true
        schema:
          $ref: '#/definitions/handler.refreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.refreshResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: 새로고침 노래 추천
      tags:
      - Recommendation
  /v1/search/{searchKeyword}:
    get:
      consumes:
      - application/json
      description: 노래 검색 API, 노래 제목 또는 아티스트 이름을 검색합니다. \n 검색 결과는 노래 제목, 아티스트 이름, 앨범명,
        노래 번호를 반환합니다.
      parameters:
      - description: 검색 키워드
        in: path
        name: searchKeyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.songSearchInfoResponses'
              type: object
        "400":
          description: 실패 - 빈 리스트 반환
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: object
              type: object
      summary: 노래 검색 API
      tags:
      - Search
  /v1/search/artist-name:
    get:
      consumes:
      - application/json
      description: 가수로 노래 검색 API, 아티스트 이름을 검색합니다. \n 검색 결과는 노래 제목, 아티스트 이름, 앨범명, 노래
        번호를 반환합니다.
      parameters:
      - description: 검색 키워드
        in: query
        name: keyword
        required: true
        type: string
      - description: 현재 조회할 노래 목록의 쪽수. 입력하지 않는다면 기본값인 1쪽을 조회
        in: query
        name: page
        type: integer
      - description: 한번에 조회할 노래 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.songSearchPageResponse'
              type: object
        "400":
          description: 실패
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: object
              type: object
      summary: 가수로 노래 검색 API
      tags:
      - Search
  /v1/search/song-name:
    get:
      consumes:
      - application/json
      description: 노래 제목으로 노래 검색 API, 노래 제목을 검색합니다. \n 검색 결과는 노래 제목, 아티스트 이름, 앨범명,
        노래 번호를 반환합니다.
      parameters:
      - description: 검색 키워드
        in: query
        name: keyword
        required: true
        type: string
      - description: 현재 조회할 노래 목록의 쪽수. 입력하지 않는다면 기본값인 1쪽을 조회
        in: query
        name: page
        type: integer
      - description: 한번에 조회할 노래 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.songSearchPageResponse'
              type: object
        "400":
          description: 실패
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: object
              type: object
      summary: 노래 제목으로 노래 검색 API
      tags:
      - Search
  /v1/search/song-number:
    get:
      consumes:
      - application/json
      description: 노래 번호로 노래 검색 API, 노래 번호를 검색합니다. \n 검색 결과는 노래 제목, 아티스트 이름, 앨범명,
        노래 번호를 반환합니다.
      parameters:
      - description: 검색 키워드
        in: query
        name: keyword
        required: true
        type: string
      - description: 현재 조회할 노래 목록의 쪽수. 입력하지 않는다면 기본값인 1쪽을 조회. 현재는 노래 번호가 정확히 일치하는
          1개만 반환하기 때문에 무의미
        in: query
        name: page
        type: integer
      - description: 한번에 조회할 노래 개수. 입력하지 않는다면 기본값인 20개씩 조회. 현재는 노래 번호가 정확히 일치하는 1개만
          반환하기 때문에 무의미
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.songSearchPageResponse'
              type: object
        "400":
          description: 실패
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: object
              type: object
      summary: 노래 번호로 노래 검색 API
      tags:
      - Search
  /v1/song-review-options:
    get:
      consumes:
      - application/json
      description: 노래 평가 선택지를 모두 조회합니다.
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      summary: 노래 평가 선택지를 모두 조회합니다.
      tags:
      - Song review option CR for admin
    post:
      consumes:
      - application/json
      description: 노래 평가 선택지를 추가합니다.
      parameters:
      - description: 평가 선택지
        in: body
        name: songReviewOptionAddRequest
        required: true
        schema:
          $ref: '#/definitions/handler.songReviewOptionAddRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
      summary: 노래 평가 선택지를 추가합니다.
      tags:
      - Song review option CR for admin
  /v1/songs/{songId}:
    get:
      consumes:
      - application/json
      description: 노래 상세 정보를 조회합니다
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.songInfoResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: 노래 상세 정보를 조회합니다
      tags:
      - Songs
  /v1/songs/{songId}/link:
    get:
      consumes:
      - application/json
      description: songId로 link를 조회합니다.
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      summary: songId로 link를 조회합니다.
      tags:
      - Link
  /v1/songs/{songId}/related:
    get:
      consumes:
      - application/json
      description: 연관된 노래들과 다음 페이지 번호를 함께 조회합니다. 노래 상세 화면에 첫 진입했을 경우 page 번호는 1입니다.
        무한스크롤을 진행한다면 응답에 포함되어 오는 nextPage를 다음번에 포함하여 보내면 됩니다. nextPage는 1씩 증가합니다.
        더이상 노래가 없을 경우, 응답에는 빈 배열과 함께 nextPage는 1로 반환됩니다.
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      - description: 현재 조회할 노래 목록의 쪽수. 입력하지 않는다면 기본값인 1쪽을 조회
        in: query
        name: page
        type: integer
      - description: 한번에 조회할 노래 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.relatedSongResponse'
              type: object
      security:
      - BearerAuth: []
      summary: 연관된 노래들을 조회합니다
      tags:
      - Songs
  /v1/songs/{songId}/reviews:
    delete:
      consumes:
      - application/json
      description: 노래 평가를 삭제합니다.
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
      security:
      - BearerAuth: []
      summary: 노래 평가를 삭제합니다.
      tags:
      - Songs
    get:
      consumes:
      - application/json
      description: 노래 평가를 조회합니다.
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.songReviewOptionGetResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: 노래 평가를 조회합니다.
      tags:
      - Songs
    put:
      consumes:
      - application/json
      description: 노래 평가를 등록/수정합니다.
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      - description: songReviewOptionId
        in: body
        name: songReview
        required: true
        schema:
          $ref: '#/definitions/handler.songReviewOptionPutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
      security:
      - BearerAuth: []
      summary: 노래 평가를 등록/수정합니다.
      tags:
      - Songs
  /v1/songs/new:
    get:
      consumes:
      - application/json
      description: 최근 한달간의 신곡을 최신순으로 조회합니다. 최근 일주일동안 추가된 신곡은 isRecentlyUpdated = true
        입니다.
      parameters:
      - description: 마지막에 조회했던 커서의 songId(이전 요청에서 lastCursor값을 주면 됨), 없다면 default로
          가장 최신곡부터 조회
        in: query
        name: cursor
        type: integer
      - description: 한번에 가져욜 노래 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.newSongInfoResponse'
              type: object
        "400":
          description: query param 값이 들어왔는데, 숫자가 아니라면 400 실패
        "500":
          description: 서버 에러일 경우 500 실패
      security:
      - BearerAuth: []
      summary: 최근 한달간의 신곡을 조회 (최신순 조회)
      tags:
      - New Song
  /v1/tags:
    get:
      consumes:
      - application/json
      description: ssss 태그 목록을 조회합니다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      summary: ssss 태그 목록 가져오기
      tags:
      - Tags
  /v1/version:
    get:
      consumes:
      - application/json
      description: 등록되어 있는 모든 버전 확인 가능
      produces:
      - application/json
      responses:
        "200":
          description: 성공" {object} pkg.BaseResponseStruct{data=[]versionResponse}
            "성공
      summary: 모든 버전 확인
      tags:
      - App Version
  /v1/version/check:
    post:
      consumes:
      - application/json
      description: 헤더에 플랫폼 정보를 포함하고, request body 앱의 버전을 보내면, 최신 버전인지 여부와 강제 업데이트
        필요 여부를 응답
      parameters:
      - description: 현재 앱 버전 정보
        in: body
        name: version
        required: true
        schema:
          $ref: '#/definitions/handler.versionCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.BaseResponseStruct'
      summary: 버전 확인
      tags:
      - App Version
  /v1/version/update:
    post:
      consumes:
      - application/json
      description: 새로운 버전이 나왔을때 버전을 추가할 수 있음 (플랫폼(ios, android), 버전, 이전 버전들을 강제 업데이트
        할지 여부)
      parameters:
      - description: 등록 버전 정보
        in: body
        name: version
        required: true
        schema:
          $ref: '#/definitions/handler.latestVersionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 성공
      summary: 버전 추가
      tags:
      - App Version
  /v2/chart:
    get:
      consumes:
      - application/json
      description: 인기차트 조회(Version2)
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handler.V2TotalChartResponse'
                  type: array
              type: object
        "400":
          description: 실패
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      summary: 인기차트 조회(Version2)
      tags:
      - Chart
  /v2/member/login:
    post:
      consumes:
      - application/json
      description: 로그인 API
      parameters:
      - description: 로그인 요청
        in: body
        name: loginV2
        required: true
        schema:
          $ref: '#/definitions/handler.LoginV2Request'
      produces:
      - application/json
      responses:
        "200":
          description: 로그인 성공
          schema:
            $ref: '#/definitions/handler.LoginV2Response'
      summary: 로그인 API
      tags:
      - Auth
  /v2/member/login/extra:
    post:
      consumes:
      - application/json
      description: 로그인 성별 및 연령 정보 받는 API
      parameters:
      - description: 로그인 요청
        in: body
        name: loginV2
        required: true
        schema:
          $ref: '#/definitions/handler.LoginV2ExtraInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 로그인 성공
          schema:
            type: ""
      security:
      - BearerAuth: []
      summary: 로그인 성별 및 연령 정보가 필요할때 사용, InfoRequired가 true일때만 사용
      tags:
      - Auth
  /v2/songs/{songId}/related:
    get:
      consumes:
      - application/json
      description: 연관된 노래들과 다음 페이지 번호를 함께 조회합니다. 노래 상세 화면에 첫 진입했을 경우 page 번호는 1입니다.
        무한스크롤을 진행한다면 응답에 포함되어 오는 nextPage를 다음번에 포함하여 보내면 됩니다. nextPage는 1씩 증가합니다.
        더이상 노래가 없을 경우, 응답에는 빈 배열과 함께 nextPage는 1로 반환됩니다.
      parameters:
      - description: songId
        in: path
        name: songId
        required: true
        type: string
      - description: 현재 조회할 노래 목록의 쪽수. 입력하지 않는다면 기본값인 1쪽을 조회
        in: query
        name: page
        type: integer
      - description: 한번에 조회할 노래 개수. 입력하지 않는다면 기본값인 20개씩 조회
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 성공
          schema:
            allOf:
            - $ref: '#/definitions/pkg.BaseResponseStruct'
            - properties:
                data:
                  $ref: '#/definitions/handler.relatedSongResponse'
              type: object
      security:
      - BearerAuth: []
      summary: 연관된 노래들을 조회합니다
      tags:
      - Songs
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
