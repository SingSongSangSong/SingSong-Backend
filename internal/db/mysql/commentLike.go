// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommentLike is an object representing the database table.
type CommentLike struct {
	CommentLikeId int64     `boil:"commentLikeId" json:"commentLikeId" toml:"commentLikeId" yaml:"commentLikeId"`
	CommentId     int64     `boil:"commentId" json:"commentId" toml:"commentId" yaml:"commentId"`
	MemberId      int64     `boil:"memberId" json:"memberId" toml:"memberId" yaml:"memberId"`
	CreatedAt     null.Time `boil:"createdAt" json:"createdAt,omitempty" toml:"createdAt" yaml:"createdAt,omitempty"`
	UpdatedAt     null.Time `boil:"updatedAt" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt     null.Time `boil:"deletedAt" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *commentLikeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentLikeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentLikeColumns = struct {
	CommentLikeId string
	CommentId     string
	MemberId      string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	CommentLikeId: "commentLikeId",
	CommentId:     "commentId",
	MemberId:      "memberId",
	CreatedAt:     "createdAt",
	UpdatedAt:     "updatedAt",
	DeletedAt:     "deletedAt",
}

var CommentLikeTableColumns = struct {
	CommentLikeId string
	CommentId     string
	MemberId      string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	CommentLikeId: "commentLike.commentLikeId",
	CommentId:     "commentLike.commentId",
	MemberId:      "commentLike.memberId",
	CreatedAt:     "commentLike.createdAt",
	UpdatedAt:     "commentLike.updatedAt",
	DeletedAt:     "commentLike.deletedAt",
}

// Generated where

var CommentLikeWhere = struct {
	CommentLikeId whereHelperint64
	CommentId     whereHelperint64
	MemberId      whereHelperint64
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
}{
	CommentLikeId: whereHelperint64{field: "`commentLike`.`commentLikeId`"},
	CommentId:     whereHelperint64{field: "`commentLike`.`commentId`"},
	MemberId:      whereHelperint64{field: "`commentLike`.`memberId`"},
	CreatedAt:     whereHelpernull_Time{field: "`commentLike`.`createdAt`"},
	UpdatedAt:     whereHelpernull_Time{field: "`commentLike`.`updatedAt`"},
	DeletedAt:     whereHelpernull_Time{field: "`commentLike`.`deletedAt`"},
}

// CommentLikeRels is where relationship names are stored.
var CommentLikeRels = struct {
}{}

// commentLikeR is where relationships are stored.
type commentLikeR struct {
}

// NewStruct creates a new relationship struct
func (*commentLikeR) NewStruct() *commentLikeR {
	return &commentLikeR{}
}

// commentLikeL is where Load methods for each relationship are stored.
type commentLikeL struct{}

var (
	commentLikeAllColumns            = []string{"commentLikeId", "commentId", "memberId", "createdAt", "updatedAt", "deletedAt"}
	commentLikeColumnsWithoutDefault = []string{"commentId", "memberId", "deletedAt"}
	commentLikeColumnsWithDefault    = []string{"commentLikeId", "createdAt", "updatedAt"}
	commentLikePrimaryKeyColumns     = []string{"commentLikeId"}
	commentLikeGeneratedColumns      = []string{}
)

type (
	// CommentLikeSlice is an alias for a slice of pointers to CommentLike.
	// This should almost always be used instead of []CommentLike.
	CommentLikeSlice []*CommentLike
	// CommentLikeHook is the signature for custom CommentLike hook methods
	CommentLikeHook func(context.Context, boil.ContextExecutor, *CommentLike) error

	commentLikeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentLikeType                 = reflect.TypeOf(&CommentLike{})
	commentLikeMapping              = queries.MakeStructMapping(commentLikeType)
	commentLikePrimaryKeyMapping, _ = queries.BindMapping(commentLikeType, commentLikeMapping, commentLikePrimaryKeyColumns)
	commentLikeInsertCacheMut       sync.RWMutex
	commentLikeInsertCache          = make(map[string]insertCache)
	commentLikeUpdateCacheMut       sync.RWMutex
	commentLikeUpdateCache          = make(map[string]updateCache)
	commentLikeUpsertCacheMut       sync.RWMutex
	commentLikeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commentLikeAfterSelectMu sync.Mutex
var commentLikeAfterSelectHooks []CommentLikeHook

var commentLikeBeforeInsertMu sync.Mutex
var commentLikeBeforeInsertHooks []CommentLikeHook
var commentLikeAfterInsertMu sync.Mutex
var commentLikeAfterInsertHooks []CommentLikeHook

var commentLikeBeforeUpdateMu sync.Mutex
var commentLikeBeforeUpdateHooks []CommentLikeHook
var commentLikeAfterUpdateMu sync.Mutex
var commentLikeAfterUpdateHooks []CommentLikeHook

var commentLikeBeforeDeleteMu sync.Mutex
var commentLikeBeforeDeleteHooks []CommentLikeHook
var commentLikeAfterDeleteMu sync.Mutex
var commentLikeAfterDeleteHooks []CommentLikeHook

var commentLikeBeforeUpsertMu sync.Mutex
var commentLikeBeforeUpsertHooks []CommentLikeHook
var commentLikeAfterUpsertMu sync.Mutex
var commentLikeAfterUpsertHooks []CommentLikeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommentLike) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommentLike) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommentLike) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommentLike) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommentLike) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommentLike) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommentLike) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommentLike) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommentLike) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentLikeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentLikeHook registers your hook function for all future operations.
func AddCommentLikeHook(hookPoint boil.HookPoint, commentLikeHook CommentLikeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		commentLikeAfterSelectMu.Lock()
		commentLikeAfterSelectHooks = append(commentLikeAfterSelectHooks, commentLikeHook)
		commentLikeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		commentLikeBeforeInsertMu.Lock()
		commentLikeBeforeInsertHooks = append(commentLikeBeforeInsertHooks, commentLikeHook)
		commentLikeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		commentLikeAfterInsertMu.Lock()
		commentLikeAfterInsertHooks = append(commentLikeAfterInsertHooks, commentLikeHook)
		commentLikeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		commentLikeBeforeUpdateMu.Lock()
		commentLikeBeforeUpdateHooks = append(commentLikeBeforeUpdateHooks, commentLikeHook)
		commentLikeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		commentLikeAfterUpdateMu.Lock()
		commentLikeAfterUpdateHooks = append(commentLikeAfterUpdateHooks, commentLikeHook)
		commentLikeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		commentLikeBeforeDeleteMu.Lock()
		commentLikeBeforeDeleteHooks = append(commentLikeBeforeDeleteHooks, commentLikeHook)
		commentLikeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		commentLikeAfterDeleteMu.Lock()
		commentLikeAfterDeleteHooks = append(commentLikeAfterDeleteHooks, commentLikeHook)
		commentLikeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		commentLikeBeforeUpsertMu.Lock()
		commentLikeBeforeUpsertHooks = append(commentLikeBeforeUpsertHooks, commentLikeHook)
		commentLikeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		commentLikeAfterUpsertMu.Lock()
		commentLikeAfterUpsertHooks = append(commentLikeAfterUpsertHooks, commentLikeHook)
		commentLikeAfterUpsertMu.Unlock()
	}
}

// One returns a single commentLike record from the query.
func (q commentLikeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommentLike, error) {
	o := &CommentLike{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for commentLike")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CommentLike records from the query.
func (q commentLikeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommentLikeSlice, error) {
	var o []*CommentLike

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to CommentLike slice")
	}

	if len(commentLikeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CommentLike records in the query.
func (q commentLikeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count commentLike rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q commentLikeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if commentLike exists")
	}

	return count > 0, nil
}

// CommentLikes retrieves all the records using an executor.
func CommentLikes(mods ...qm.QueryMod) commentLikeQuery {
	mods = append(mods, qm.From("`commentLike`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`commentLike`.*"})
	}

	return commentLikeQuery{q}
}

// FindCommentLike retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentLike(ctx context.Context, exec boil.ContextExecutor, commentLikeId int64, selectCols ...string) (*CommentLike, error) {
	commentLikeObj := &CommentLike{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `commentLike` where `commentLikeId`=?", sel,
	)

	q := queries.Raw(query, commentLikeId)

	err := q.Bind(ctx, exec, commentLikeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from commentLike")
	}

	if err = commentLikeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return commentLikeObj, err
	}

	return commentLikeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentLike) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no commentLike provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentLikeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentLikeInsertCacheMut.RLock()
	cache, cached := commentLikeInsertCache[key]
	commentLikeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentLikeAllColumns,
			commentLikeColumnsWithDefault,
			commentLikeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `commentLike` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `commentLike` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `commentLike` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, commentLikePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into commentLike")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CommentLikeId = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == commentLikeMapping["commentLikeId"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CommentLikeId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for commentLike")
	}

CacheNoHooks:
	if !cached {
		commentLikeInsertCacheMut.Lock()
		commentLikeInsertCache[key] = cache
		commentLikeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CommentLike.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentLike) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commentLikeUpdateCacheMut.RLock()
	cache, cached := commentLikeUpdateCache[key]
	commentLikeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentLikeAllColumns,
			commentLikePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update commentLike, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `commentLike` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, commentLikePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, append(wl, commentLikePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update commentLike row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for commentLike")
	}

	if !cached {
		commentLikeUpdateCacheMut.Lock()
		commentLikeUpdateCache[key] = cache
		commentLikeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q commentLikeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for commentLike")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for commentLike")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentLikeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `commentLike` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentLikePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in commentLike slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all commentLike")
	}
	return rowsAff, nil
}

var mySQLCommentLikeUniqueColumns = []string{
	"commentLikeId",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentLike) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no commentLike provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentLikeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCommentLikeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentLikeUpsertCacheMut.RLock()
	cache, cached := commentLikeUpsertCache[key]
	commentLikeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commentLikeAllColumns,
			commentLikeColumnsWithDefault,
			commentLikeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commentLikeAllColumns,
			commentLikePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert commentLike, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`commentLike`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `commentLike` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for commentLike")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CommentLikeId = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == commentLikeMapping["commentLikeId"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(commentLikeType, commentLikeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for commentLike")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for commentLike")
	}

CacheNoHooks:
	if !cached {
		commentLikeUpsertCacheMut.Lock()
		commentLikeUpsertCache[key] = cache
		commentLikeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CommentLike record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentLike) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no CommentLike provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentLikePrimaryKeyMapping)
	sql := "DELETE FROM `commentLike` WHERE `commentLikeId`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from commentLike")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for commentLike")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q commentLikeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no commentLikeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from commentLike")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for commentLike")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentLikeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commentLikeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `commentLike` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentLikePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from commentLike slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for commentLike")
	}

	if len(commentLikeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentLike) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommentLike(ctx, exec, o.CommentLikeId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentLikeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentLikeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `commentLike`.* FROM `commentLike` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentLikePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in CommentLikeSlice")
	}

	*o = slice

	return nil
}

// CommentLikeExists checks if the CommentLike row exists.
func CommentLikeExists(ctx context.Context, exec boil.ContextExecutor, commentLikeId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `commentLike` where `commentLikeId`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, commentLikeId)
	}
	row := exec.QueryRowContext(ctx, sql, commentLikeId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if commentLike exists")
	}

	return exists, nil
}

// Exists checks if the CommentLike row exists.
func (o *CommentLike) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CommentLikeExists(ctx, exec, o.CommentLikeId)
}
