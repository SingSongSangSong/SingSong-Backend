// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Artist is an object representing the database table.
type Artist struct {
	ArtistID       int64       `boil:"artist_id" json:"artist_id" toml:"artist_id" yaml:"artist_id"`
	ArtistName     string      `boil:"artist_name" json:"artist_name" toml:"artist_name" yaml:"artist_name"`
	ArtistType     null.String `boil:"artist_type" json:"artist_type,omitempty" toml:"artist_type" yaml:"artist_type,omitempty"`
	RelatedArtists null.String `boil:"related_artists" json:"related_artists,omitempty" toml:"related_artists" yaml:"related_artists,omitempty"`
	Country        null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *artistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtistColumns = struct {
	ArtistID       string
	ArtistName     string
	ArtistType     string
	RelatedArtists string
	Country        string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ArtistID:       "artist_id",
	ArtistName:     "artist_name",
	ArtistType:     "artist_type",
	RelatedArtists: "related_artists",
	Country:        "country",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var ArtistTableColumns = struct {
	ArtistID       string
	ArtistName     string
	ArtistType     string
	RelatedArtists string
	Country        string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ArtistID:       "artist.artist_id",
	ArtistName:     "artist.artist_name",
	ArtistType:     "artist.artist_type",
	RelatedArtists: "artist.related_artists",
	Country:        "artist.country",
	CreatedAt:      "artist.created_at",
	UpdatedAt:      "artist.updated_at",
	DeletedAt:      "artist.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ArtistWhere = struct {
	ArtistID       whereHelperint64
	ArtistName     whereHelperstring
	ArtistType     whereHelpernull_String
	RelatedArtists whereHelpernull_String
	Country        whereHelpernull_String
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
}{
	ArtistID:       whereHelperint64{field: "`artist`.`artist_id`"},
	ArtistName:     whereHelperstring{field: "`artist`.`artist_name`"},
	ArtistType:     whereHelpernull_String{field: "`artist`.`artist_type`"},
	RelatedArtists: whereHelpernull_String{field: "`artist`.`related_artists`"},
	Country:        whereHelpernull_String{field: "`artist`.`country`"},
	CreatedAt:      whereHelpernull_Time{field: "`artist`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`artist`.`updated_at`"},
	DeletedAt:      whereHelpernull_Time{field: "`artist`.`deleted_at`"},
}

// ArtistRels is where relationship names are stored.
var ArtistRels = struct {
}{}

// artistR is where relationships are stored.
type artistR struct {
}

// NewStruct creates a new relationship struct
func (*artistR) NewStruct() *artistR {
	return &artistR{}
}

// artistL is where Load methods for each relationship are stored.
type artistL struct{}

var (
	artistAllColumns            = []string{"artist_id", "artist_name", "artist_type", "related_artists", "country", "created_at", "updated_at", "deleted_at"}
	artistColumnsWithoutDefault = []string{"artist_name", "artist_type", "related_artists", "country", "deleted_at"}
	artistColumnsWithDefault    = []string{"artist_id", "created_at", "updated_at"}
	artistPrimaryKeyColumns     = []string{"artist_id"}
	artistGeneratedColumns      = []string{}
)

type (
	// ArtistSlice is an alias for a slice of pointers to Artist.
	// This should almost always be used instead of []Artist.
	ArtistSlice []*Artist
	// ArtistHook is the signature for custom Artist hook methods
	ArtistHook func(context.Context, boil.ContextExecutor, *Artist) error

	artistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artistType                 = reflect.TypeOf(&Artist{})
	artistMapping              = queries.MakeStructMapping(artistType)
	artistPrimaryKeyMapping, _ = queries.BindMapping(artistType, artistMapping, artistPrimaryKeyColumns)
	artistInsertCacheMut       sync.RWMutex
	artistInsertCache          = make(map[string]insertCache)
	artistUpdateCacheMut       sync.RWMutex
	artistUpdateCache          = make(map[string]updateCache)
	artistUpsertCacheMut       sync.RWMutex
	artistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artistAfterSelectMu sync.Mutex
var artistAfterSelectHooks []ArtistHook

var artistBeforeInsertMu sync.Mutex
var artistBeforeInsertHooks []ArtistHook
var artistAfterInsertMu sync.Mutex
var artistAfterInsertHooks []ArtistHook

var artistBeforeUpdateMu sync.Mutex
var artistBeforeUpdateHooks []ArtistHook
var artistAfterUpdateMu sync.Mutex
var artistAfterUpdateHooks []ArtistHook

var artistBeforeDeleteMu sync.Mutex
var artistBeforeDeleteHooks []ArtistHook
var artistAfterDeleteMu sync.Mutex
var artistAfterDeleteHooks []ArtistHook

var artistBeforeUpsertMu sync.Mutex
var artistBeforeUpsertHooks []ArtistHook
var artistAfterUpsertMu sync.Mutex
var artistAfterUpsertHooks []ArtistHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Artist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Artist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Artist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Artist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Artist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Artist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Artist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Artist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Artist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtistHook registers your hook function for all future operations.
func AddArtistHook(hookPoint boil.HookPoint, artistHook ArtistHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		artistAfterSelectMu.Lock()
		artistAfterSelectHooks = append(artistAfterSelectHooks, artistHook)
		artistAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		artistBeforeInsertMu.Lock()
		artistBeforeInsertHooks = append(artistBeforeInsertHooks, artistHook)
		artistBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		artistAfterInsertMu.Lock()
		artistAfterInsertHooks = append(artistAfterInsertHooks, artistHook)
		artistAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		artistBeforeUpdateMu.Lock()
		artistBeforeUpdateHooks = append(artistBeforeUpdateHooks, artistHook)
		artistBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		artistAfterUpdateMu.Lock()
		artistAfterUpdateHooks = append(artistAfterUpdateHooks, artistHook)
		artistAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		artistBeforeDeleteMu.Lock()
		artistBeforeDeleteHooks = append(artistBeforeDeleteHooks, artistHook)
		artistBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		artistAfterDeleteMu.Lock()
		artistAfterDeleteHooks = append(artistAfterDeleteHooks, artistHook)
		artistAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		artistBeforeUpsertMu.Lock()
		artistBeforeUpsertHooks = append(artistBeforeUpsertHooks, artistHook)
		artistBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		artistAfterUpsertMu.Lock()
		artistAfterUpsertHooks = append(artistAfterUpsertHooks, artistHook)
		artistAfterUpsertMu.Unlock()
	}
}

// One returns a single artist record from the query.
func (q artistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Artist, error) {
	o := &Artist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for artist")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Artist records from the query.
func (q artistQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtistSlice, error) {
	var o []*Artist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to Artist slice")
	}

	if len(artistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Artist records in the query.
func (q artistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count artist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q artistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if artist exists")
	}

	return count > 0, nil
}

// Artists retrieves all the records using an executor.
func Artists(mods ...qm.QueryMod) artistQuery {
	mods = append(mods, qm.From("`artist`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`artist`.*"})
	}

	return artistQuery{q}
}

// FindArtist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArtist(ctx context.Context, exec boil.ContextExecutor, artistID int64, selectCols ...string) (*Artist, error) {
	artistObj := &Artist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `artist` where `artist_id`=?", sel,
	)

	q := queries.Raw(query, artistID)

	err := q.Bind(ctx, exec, artistObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from artist")
	}

	if err = artistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artistObj, err
	}

	return artistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Artist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no artist provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artistInsertCacheMut.RLock()
	cache, cached := artistInsertCache[key]
	artistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artistAllColumns,
			artistColumnsWithDefault,
			artistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artistType, artistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `artist` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `artist` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `artist` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, artistPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into artist")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ArtistID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == artistMapping["artist_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ArtistID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for artist")
	}

CacheNoHooks:
	if !cached {
		artistInsertCacheMut.Lock()
		artistInsertCache[key] = cache
		artistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Artist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Artist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artistUpdateCacheMut.RLock()
	cache, cached := artistUpdateCache[key]
	artistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update artist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `artist` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, artistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, append(wl, artistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update artist row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for artist")
	}

	if !cached {
		artistUpdateCacheMut.Lock()
		artistUpdateCache[key] = cache
		artistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q artistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for artist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for artist")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `artist` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in artist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all artist")
	}
	return rowsAff, nil
}

var mySQLArtistUniqueColumns = []string{
	"artist_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Artist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no artist provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLArtistUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artistUpsertCacheMut.RLock()
	cache, cached := artistUpsertCache[key]
	artistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			artistAllColumns,
			artistColumnsWithDefault,
			artistColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert artist, could not build update column list")
		}

		ret := strmangle.SetComplement(artistAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`artist`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `artist` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artistType, artistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for artist")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ArtistID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == artistMapping["artist_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(artistType, artistMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for artist")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for artist")
	}

CacheNoHooks:
	if !cached {
		artistUpsertCacheMut.Lock()
		artistUpsertCache[key] = cache
		artistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Artist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Artist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no Artist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artistPrimaryKeyMapping)
	sql := "DELETE FROM `artist` WHERE `artist_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from artist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for artist")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q artistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no artistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from artist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for artist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `artist` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from artist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for artist")
	}

	if len(artistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Artist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArtist(ctx, exec, o.ArtistID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `artist`.* FROM `artist` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in ArtistSlice")
	}

	*o = slice

	return nil
}

// ArtistExists checks if the Artist row exists.
func ArtistExists(ctx context.Context, exec boil.ContextExecutor, artistID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `artist` where `artist_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, artistID)
	}
	row := exec.QueryRowContext(ctx, sql, artistID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if artist exists")
	}

	return exists, nil
}

// Exists checks if the Artist row exists.
func (o *Artist) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ArtistExists(ctx, exec, o.ArtistID)
}
