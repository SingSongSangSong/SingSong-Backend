// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Member is an object representing the database table.
type Member struct {
	MemberID    int64       `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Nickname    null.String `boil:"nickname" json:"nickname,omitempty" toml:"nickname" yaml:"nickname,omitempty"`
	Email       string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Gender      null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	Birthyear   null.Int    `boil:"birthyear" json:"birthyear,omitempty" toml:"birthyear" yaml:"birthyear,omitempty"`
	Provider    string      `boil:"provider" json:"provider" toml:"provider" yaml:"provider"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	NotArchived null.Bool   `boil:"not_archived" json:"not_archived,omitempty" toml:"not_archived" yaml:"not_archived,omitempty"`

	R *memberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberColumns = struct {
	MemberID    string
	Nickname    string
	Email       string
	Gender      string
	Birthyear   string
	Provider    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	NotArchived string
}{
	MemberID:    "member_id",
	Nickname:    "nickname",
	Email:       "email",
	Gender:      "gender",
	Birthyear:   "birthyear",
	Provider:    "provider",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	NotArchived: "not_archived",
}

var MemberTableColumns = struct {
	MemberID    string
	Nickname    string
	Email       string
	Gender      string
	Birthyear   string
	Provider    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	NotArchived string
}{
	MemberID:    "member.member_id",
	Nickname:    "member.nickname",
	Email:       "member.email",
	Gender:      "member.gender",
	Birthyear:   "member.birthyear",
	Provider:    "member.provider",
	CreatedAt:   "member.created_at",
	UpdatedAt:   "member.updated_at",
	DeletedAt:   "member.deleted_at",
	NotArchived: "member.not_archived",
}

// Generated where

var MemberWhere = struct {
	MemberID    whereHelperint64
	Nickname    whereHelpernull_String
	Email       whereHelperstring
	Gender      whereHelpernull_String
	Birthyear   whereHelpernull_Int
	Provider    whereHelperstring
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
	NotArchived whereHelpernull_Bool
}{
	MemberID:    whereHelperint64{field: "`member`.`member_id`"},
	Nickname:    whereHelpernull_String{field: "`member`.`nickname`"},
	Email:       whereHelperstring{field: "`member`.`email`"},
	Gender:      whereHelpernull_String{field: "`member`.`gender`"},
	Birthyear:   whereHelpernull_Int{field: "`member`.`birthyear`"},
	Provider:    whereHelperstring{field: "`member`.`provider`"},
	CreatedAt:   whereHelpernull_Time{field: "`member`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`member`.`updated_at`"},
	DeletedAt:   whereHelpernull_Time{field: "`member`.`deleted_at`"},
	NotArchived: whereHelpernull_Bool{field: "`member`.`not_archived`"},
}

// MemberRels is where relationship names are stored.
var MemberRels = struct {
	Comments string
}{
	Comments: "Comments",
}

// memberR is where relationships are stored.
type memberR struct {
	Comments CommentSlice `boil:"Comments" json:"Comments" toml:"Comments" yaml:"Comments"`
}

// NewStruct creates a new relationship struct
func (*memberR) NewStruct() *memberR {
	return &memberR{}
}

func (r *memberR) GetComments() CommentSlice {
	if r == nil {
		return nil
	}
	return r.Comments
}

// memberL is where Load methods for each relationship are stored.
type memberL struct{}

var (
	memberAllColumns            = []string{"member_id", "nickname", "email", "gender", "birthyear", "provider", "created_at", "updated_at", "deleted_at", "not_archived"}
	memberColumnsWithoutDefault = []string{"nickname", "email", "gender", "birthyear", "provider", "deleted_at"}
	memberColumnsWithDefault    = []string{"member_id", "created_at", "updated_at", "not_archived"}
	memberPrimaryKeyColumns     = []string{"member_id"}
	memberGeneratedColumns      = []string{"not_archived"}
)

type (
	// MemberSlice is an alias for a slice of pointers to Member.
	// This should almost always be used instead of []Member.
	MemberSlice []*Member
	// MemberHook is the signature for custom Member hook methods
	MemberHook func(context.Context, boil.ContextExecutor, *Member) error

	memberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberType                 = reflect.TypeOf(&Member{})
	memberMapping              = queries.MakeStructMapping(memberType)
	memberPrimaryKeyMapping, _ = queries.BindMapping(memberType, memberMapping, memberPrimaryKeyColumns)
	memberInsertCacheMut       sync.RWMutex
	memberInsertCache          = make(map[string]insertCache)
	memberUpdateCacheMut       sync.RWMutex
	memberUpdateCache          = make(map[string]updateCache)
	memberUpsertCacheMut       sync.RWMutex
	memberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberAfterSelectHooks []MemberHook

var memberBeforeInsertHooks []MemberHook
var memberAfterInsertHooks []MemberHook

var memberBeforeUpdateHooks []MemberHook
var memberAfterUpdateHooks []MemberHook

var memberBeforeDeleteHooks []MemberHook
var memberAfterDeleteHooks []MemberHook

var memberBeforeUpsertHooks []MemberHook
var memberAfterUpsertHooks []MemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Member) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Member) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Member) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Member) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Member) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Member) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Member) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Member) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Member) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberHook registers your hook function for all future operations.
func AddMemberHook(hookPoint boil.HookPoint, memberHook MemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memberAfterSelectHooks = append(memberAfterSelectHooks, memberHook)
	case boil.BeforeInsertHook:
		memberBeforeInsertHooks = append(memberBeforeInsertHooks, memberHook)
	case boil.AfterInsertHook:
		memberAfterInsertHooks = append(memberAfterInsertHooks, memberHook)
	case boil.BeforeUpdateHook:
		memberBeforeUpdateHooks = append(memberBeforeUpdateHooks, memberHook)
	case boil.AfterUpdateHook:
		memberAfterUpdateHooks = append(memberAfterUpdateHooks, memberHook)
	case boil.BeforeDeleteHook:
		memberBeforeDeleteHooks = append(memberBeforeDeleteHooks, memberHook)
	case boil.AfterDeleteHook:
		memberAfterDeleteHooks = append(memberAfterDeleteHooks, memberHook)
	case boil.BeforeUpsertHook:
		memberBeforeUpsertHooks = append(memberBeforeUpsertHooks, memberHook)
	case boil.AfterUpsertHook:
		memberAfterUpsertHooks = append(memberAfterUpsertHooks, memberHook)
	}
}

// One returns a single member record from the query.
func (q memberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Member, error) {
	o := &Member{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for member")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Member records from the query.
func (q memberQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberSlice, error) {
	var o []*Member

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to Member slice")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Member records in the query.
func (q memberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count member rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if member exists")
	}

	return count > 0, nil
}

// Comments retrieves all the comment's Comments with an executor.
func (o *Member) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`comment`.`member_id`=?", o.MemberID),
	)

	return Comments(queryMods...)
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args = append(args, object.MemberID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comment`),
		qm.WhereIn(`comment.member_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Member = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.MemberID {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Member = local
				break
			}
		}
	}

	return nil
}

// AddComments adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Member appropriately.
func (o *Member) AddComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `comment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
				strmangle.WhereClause("`", "`", 0, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.CommentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Member: o,
			}
		} else {
			rel.R.Member = o
		}
	}
	return nil
}

// Members retrieves all the records using an executor.
func Members(mods ...qm.QueryMod) memberQuery {
	mods = append(mods, qm.From("`member`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`member`.*"})
	}

	return memberQuery{q}
}

// FindMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMember(ctx context.Context, exec boil.ContextExecutor, memberID int64, selectCols ...string) (*Member, error) {
	memberObj := &Member{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member` where `member_id`=?", sel,
	)

	q := queries.Raw(query, memberID)

	err := q.Bind(ctx, exec, memberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from member")
	}

	if err = memberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberObj, err
	}

	return memberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Member) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no member provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberInsertCacheMut.RLock()
	cache, cached := memberInsertCache[key]
	memberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, memberGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberType, memberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into member")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.MemberID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberMapping["member_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MemberID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for member")
	}

CacheNoHooks:
	if !cached {
		memberInsertCacheMut.Lock()
		memberInsertCache[key] = cache
		memberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Member.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Member) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberUpdateCacheMut.RLock()
	cache, cached := memberUpdateCache[key]
	memberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, memberGeneratedColumns)

		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update member, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, append(wl, memberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update member row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for member")
	}

	if !cached {
		memberUpdateCacheMut.Lock()
		memberUpdateCache[key] = cache
		memberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for member")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all member")
	}
	return rowsAff, nil
}

var mySQLMemberUniqueColumns = []string{
	"member_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Member) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no member provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberUpsertCacheMut.RLock()
	cache, cached := memberUpsertCache[key]
	memberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, memberGeneratedColumns)
		update = strmangle.SetComplement(update, memberGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert member, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`member`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberType, memberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for member")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.MemberID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberMapping["member_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberType, memberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for member")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for member")
	}

CacheNoHooks:
	if !cached {
		memberUpsertCacheMut.Lock()
		memberUpsertCache[key] = cache
		memberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Member record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Member) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no Member provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberPrimaryKeyMapping)
	sql := "DELETE FROM `member` WHERE `member_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for member")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no memberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for member")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for member")
	}

	if len(memberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Member) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMember(ctx, exec, o.MemberID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member`.* FROM `member` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in MemberSlice")
	}

	*o = slice

	return nil
}

// MemberExists checks if the Member row exists.
func MemberExists(ctx context.Context, exec boil.ContextExecutor, memberID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member` where `member_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, memberID)
	}
	row := exec.QueryRowContext(ctx, sql, memberID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if member exists")
	}

	return exists, nil
}

// Exists checks if the Member row exists.
func (o *Member) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemberExists(ctx, exec, o.MemberID)
}
