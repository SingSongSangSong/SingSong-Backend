// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LLMSearchLog is an object representing the database table.
type LLMSearchLog struct {
	LLMSearchLogID int64     `boil:"llm_search_log_id" json:"llm_search_log_id" toml:"llm_search_log_id" yaml:"llm_search_log_id"`
	MemberID       int64     `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	SearchText     string    `boil:"search_text" json:"search_text" toml:"search_text" yaml:"search_text"`
	CreatedAt      null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *llmSearchLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L llmSearchLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LLMSearchLogColumns = struct {
	LLMSearchLogID string
	MemberID       string
	SearchText     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	LLMSearchLogID: "llm_search_log_id",
	MemberID:       "member_id",
	SearchText:     "search_text",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var LLMSearchLogTableColumns = struct {
	LLMSearchLogID string
	MemberID       string
	SearchText     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	LLMSearchLogID: "llm_search_log.llm_search_log_id",
	MemberID:       "llm_search_log.member_id",
	SearchText:     "llm_search_log.search_text",
	CreatedAt:      "llm_search_log.created_at",
	UpdatedAt:      "llm_search_log.updated_at",
	DeletedAt:      "llm_search_log.deleted_at",
}

// Generated where

var LLMSearchLogWhere = struct {
	LLMSearchLogID whereHelperint64
	MemberID       whereHelperint64
	SearchText     whereHelperstring
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
}{
	LLMSearchLogID: whereHelperint64{field: "`llm_search_log`.`llm_search_log_id`"},
	MemberID:       whereHelperint64{field: "`llm_search_log`.`member_id`"},
	SearchText:     whereHelperstring{field: "`llm_search_log`.`search_text`"},
	CreatedAt:      whereHelpernull_Time{field: "`llm_search_log`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`llm_search_log`.`updated_at`"},
	DeletedAt:      whereHelpernull_Time{field: "`llm_search_log`.`deleted_at`"},
}

// LLMSearchLogRels is where relationship names are stored.
var LLMSearchLogRels = struct {
	Member string
}{
	Member: "Member",
}

// llmSearchLogR is where relationships are stored.
type llmSearchLogR struct {
	Member *Member `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
}

// NewStruct creates a new relationship struct
func (*llmSearchLogR) NewStruct() *llmSearchLogR {
	return &llmSearchLogR{}
}

func (r *llmSearchLogR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

// llmSearchLogL is where Load methods for each relationship are stored.
type llmSearchLogL struct{}

var (
	llmSearchLogAllColumns            = []string{"llm_search_log_id", "member_id", "search_text", "created_at", "updated_at", "deleted_at"}
	llmSearchLogColumnsWithoutDefault = []string{"member_id", "search_text", "deleted_at"}
	llmSearchLogColumnsWithDefault    = []string{"llm_search_log_id", "created_at", "updated_at"}
	llmSearchLogPrimaryKeyColumns     = []string{"llm_search_log_id"}
	llmSearchLogGeneratedColumns      = []string{}
)

type (
	// LLMSearchLogSlice is an alias for a slice of pointers to LLMSearchLog.
	// This should almost always be used instead of []LLMSearchLog.
	LLMSearchLogSlice []*LLMSearchLog
	// LLMSearchLogHook is the signature for custom LLMSearchLog hook methods
	LLMSearchLogHook func(context.Context, boil.ContextExecutor, *LLMSearchLog) error

	llmSearchLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	llmSearchLogType                 = reflect.TypeOf(&LLMSearchLog{})
	llmSearchLogMapping              = queries.MakeStructMapping(llmSearchLogType)
	llmSearchLogPrimaryKeyMapping, _ = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, llmSearchLogPrimaryKeyColumns)
	llmSearchLogInsertCacheMut       sync.RWMutex
	llmSearchLogInsertCache          = make(map[string]insertCache)
	llmSearchLogUpdateCacheMut       sync.RWMutex
	llmSearchLogUpdateCache          = make(map[string]updateCache)
	llmSearchLogUpsertCacheMut       sync.RWMutex
	llmSearchLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var llmSearchLogAfterSelectHooks []LLMSearchLogHook

var llmSearchLogBeforeInsertHooks []LLMSearchLogHook
var llmSearchLogAfterInsertHooks []LLMSearchLogHook

var llmSearchLogBeforeUpdateHooks []LLMSearchLogHook
var llmSearchLogAfterUpdateHooks []LLMSearchLogHook

var llmSearchLogBeforeDeleteHooks []LLMSearchLogHook
var llmSearchLogAfterDeleteHooks []LLMSearchLogHook

var llmSearchLogBeforeUpsertHooks []LLMSearchLogHook
var llmSearchLogAfterUpsertHooks []LLMSearchLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LLMSearchLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LLMSearchLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LLMSearchLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LLMSearchLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LLMSearchLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LLMSearchLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LLMSearchLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LLMSearchLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LLMSearchLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range llmSearchLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLLMSearchLogHook registers your hook function for all future operations.
func AddLLMSearchLogHook(hookPoint boil.HookPoint, llmSearchLogHook LLMSearchLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		llmSearchLogAfterSelectHooks = append(llmSearchLogAfterSelectHooks, llmSearchLogHook)
	case boil.BeforeInsertHook:
		llmSearchLogBeforeInsertHooks = append(llmSearchLogBeforeInsertHooks, llmSearchLogHook)
	case boil.AfterInsertHook:
		llmSearchLogAfterInsertHooks = append(llmSearchLogAfterInsertHooks, llmSearchLogHook)
	case boil.BeforeUpdateHook:
		llmSearchLogBeforeUpdateHooks = append(llmSearchLogBeforeUpdateHooks, llmSearchLogHook)
	case boil.AfterUpdateHook:
		llmSearchLogAfterUpdateHooks = append(llmSearchLogAfterUpdateHooks, llmSearchLogHook)
	case boil.BeforeDeleteHook:
		llmSearchLogBeforeDeleteHooks = append(llmSearchLogBeforeDeleteHooks, llmSearchLogHook)
	case boil.AfterDeleteHook:
		llmSearchLogAfterDeleteHooks = append(llmSearchLogAfterDeleteHooks, llmSearchLogHook)
	case boil.BeforeUpsertHook:
		llmSearchLogBeforeUpsertHooks = append(llmSearchLogBeforeUpsertHooks, llmSearchLogHook)
	case boil.AfterUpsertHook:
		llmSearchLogAfterUpsertHooks = append(llmSearchLogAfterUpsertHooks, llmSearchLogHook)
	}
}

// One returns a single llmSearchLog record from the query.
func (q llmSearchLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LLMSearchLog, error) {
	o := &LLMSearchLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for llm_search_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LLMSearchLog records from the query.
func (q llmSearchLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (LLMSearchLogSlice, error) {
	var o []*LLMSearchLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to LLMSearchLog slice")
	}

	if len(llmSearchLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LLMSearchLog records in the query.
func (q llmSearchLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count llm_search_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q llmSearchLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if llm_search_log exists")
	}

	return count > 0, nil
}

// Member pointed to by the foreign key.
func (o *LLMSearchLog) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (llmSearchLogL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLLMSearchLog interface{}, mods queries.Applicator) error {
	var slice []*LLMSearchLog
	var object *LLMSearchLog

	if singular {
		var ok bool
		object, ok = maybeLLMSearchLog.(*LLMSearchLog)
		if !ok {
			object = new(LLMSearchLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLLMSearchLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLLMSearchLog))
			}
		}
	} else {
		s, ok := maybeLLMSearchLog.(*[]*LLMSearchLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLLMSearchLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLLMSearchLog))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &llmSearchLogR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &llmSearchLogR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.LLMSearchLogs = append(foreign.R.LLMSearchLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.LLMSearchLogs = append(foreign.R.LLMSearchLogs, local)
				break
			}
		}
	}

	return nil
}

// SetMember of the llmSearchLog to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.LLMSearchLogs.
func (o *LLMSearchLog) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `llm_search_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, llmSearchLogPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.LLMSearchLogID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &llmSearchLogR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			LLMSearchLogs: LLMSearchLogSlice{o},
		}
	} else {
		related.R.LLMSearchLogs = append(related.R.LLMSearchLogs, o)
	}

	return nil
}

// LLMSearchLogs retrieves all the records using an executor.
func LLMSearchLogs(mods ...qm.QueryMod) llmSearchLogQuery {
	mods = append(mods, qm.From("`llm_search_log`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`llm_search_log`.*"})
	}

	return llmSearchLogQuery{q}
}

// FindLLMSearchLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLLMSearchLog(ctx context.Context, exec boil.ContextExecutor, lLMSearchLogID int64, selectCols ...string) (*LLMSearchLog, error) {
	llmSearchLogObj := &LLMSearchLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `llm_search_log` where `llm_search_log_id`=?", sel,
	)

	q := queries.Raw(query, lLMSearchLogID)

	err := q.Bind(ctx, exec, llmSearchLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from llm_search_log")
	}

	if err = llmSearchLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return llmSearchLogObj, err
	}

	return llmSearchLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LLMSearchLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no llm_search_log provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(llmSearchLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	llmSearchLogInsertCacheMut.RLock()
	cache, cached := llmSearchLogInsertCache[key]
	llmSearchLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			llmSearchLogAllColumns,
			llmSearchLogColumnsWithDefault,
			llmSearchLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `llm_search_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `llm_search_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `llm_search_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, llmSearchLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into llm_search_log")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LLMSearchLogID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == llmSearchLogMapping["llm_search_log_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.LLMSearchLogID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for llm_search_log")
	}

CacheNoHooks:
	if !cached {
		llmSearchLogInsertCacheMut.Lock()
		llmSearchLogInsertCache[key] = cache
		llmSearchLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LLMSearchLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LLMSearchLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	llmSearchLogUpdateCacheMut.RLock()
	cache, cached := llmSearchLogUpdateCache[key]
	llmSearchLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			llmSearchLogAllColumns,
			llmSearchLogPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update llm_search_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `llm_search_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, llmSearchLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, append(wl, llmSearchLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update llm_search_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for llm_search_log")
	}

	if !cached {
		llmSearchLogUpdateCacheMut.Lock()
		llmSearchLogUpdateCache[key] = cache
		llmSearchLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q llmSearchLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for llm_search_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for llm_search_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LLMSearchLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), llmSearchLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `llm_search_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, llmSearchLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in llmSearchLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all llmSearchLog")
	}
	return rowsAff, nil
}

var mySQLLLMSearchLogUniqueColumns = []string{
	"llm_search_log_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LLMSearchLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no llm_search_log provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(llmSearchLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLLMSearchLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	llmSearchLogUpsertCacheMut.RLock()
	cache, cached := llmSearchLogUpsertCache[key]
	llmSearchLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			llmSearchLogAllColumns,
			llmSearchLogColumnsWithDefault,
			llmSearchLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			llmSearchLogAllColumns,
			llmSearchLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert llm_search_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`llm_search_log`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `llm_search_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for llm_search_log")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LLMSearchLogID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == llmSearchLogMapping["llm_search_log_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(llmSearchLogType, llmSearchLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for llm_search_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for llm_search_log")
	}

CacheNoHooks:
	if !cached {
		llmSearchLogUpsertCacheMut.Lock()
		llmSearchLogUpsertCache[key] = cache
		llmSearchLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LLMSearchLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LLMSearchLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no LLMSearchLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), llmSearchLogPrimaryKeyMapping)
	sql := "DELETE FROM `llm_search_log` WHERE `llm_search_log_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from llm_search_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for llm_search_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q llmSearchLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no llmSearchLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from llm_search_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for llm_search_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LLMSearchLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(llmSearchLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), llmSearchLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `llm_search_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, llmSearchLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from llmSearchLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for llm_search_log")
	}

	if len(llmSearchLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LLMSearchLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLLMSearchLog(ctx, exec, o.LLMSearchLogID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LLMSearchLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LLMSearchLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), llmSearchLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `llm_search_log`.* FROM `llm_search_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, llmSearchLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in LLMSearchLogSlice")
	}

	*o = slice

	return nil
}

// LLMSearchLogExists checks if the LLMSearchLog row exists.
func LLMSearchLogExists(ctx context.Context, exec boil.ContextExecutor, lLMSearchLogID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `llm_search_log` where `llm_search_log_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, lLMSearchLogID)
	}
	row := exec.QueryRowContext(ctx, sql, lLMSearchLogID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if llm_search_log exists")
	}

	return exists, nil
}

// Exists checks if the LLMSearchLog row exists.
func (o *LLMSearchLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LLMSearchLogExists(ctx, exec, o.LLMSearchLogID)
}
