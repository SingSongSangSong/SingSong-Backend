// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KeepSong is an object representing the database table.
type KeepSong struct {
	KeepSongID int64     `boil:"keep_song_id" json:"keep_song_id" toml:"keep_song_id" yaml:"keep_song_id"`
	KeepListID int64     `boil:"keep_list_id" json:"keep_list_id" toml:"keep_list_id" yaml:"keep_list_id"`
	SongInfoID int64     `boil:"song_info_id" json:"song_info_id" toml:"song_info_id" yaml:"song_info_id"`
	SongNumber int       `boil:"song_number" json:"song_number" toml:"song_number" yaml:"song_number"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt  null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *keepSongR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keepSongL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeepSongColumns = struct {
	KeepSongID string
	KeepListID string
	SongInfoID string
	SongNumber string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	KeepSongID: "keep_song_id",
	KeepListID: "keep_list_id",
	SongInfoID: "song_info_id",
	SongNumber: "song_number",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var KeepSongTableColumns = struct {
	KeepSongID string
	KeepListID string
	SongInfoID string
	SongNumber string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	KeepSongID: "keep_song.keep_song_id",
	KeepListID: "keep_song.keep_list_id",
	SongInfoID: "keep_song.song_info_id",
	SongNumber: "keep_song.song_number",
	CreatedAt:  "keep_song.created_at",
	UpdatedAt:  "keep_song.updated_at",
	DeletedAt:  "keep_song.deleted_at",
}

// Generated where

var KeepSongWhere = struct {
	KeepSongID whereHelperint64
	KeepListID whereHelperint64
	SongInfoID whereHelperint64
	SongNumber whereHelperint
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
}{
	KeepSongID: whereHelperint64{field: "`keep_song`.`keep_song_id`"},
	KeepListID: whereHelperint64{field: "`keep_song`.`keep_list_id`"},
	SongInfoID: whereHelperint64{field: "`keep_song`.`song_info_id`"},
	SongNumber: whereHelperint{field: "`keep_song`.`song_number`"},
	CreatedAt:  whereHelpernull_Time{field: "`keep_song`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`keep_song`.`updated_at`"},
	DeletedAt:  whereHelpernull_Time{field: "`keep_song`.`deleted_at`"},
}

// KeepSongRels is where relationship names are stored.
var KeepSongRels = struct {
}{}

// keepSongR is where relationships are stored.
type keepSongR struct {
}

// NewStruct creates a new relationship struct
func (*keepSongR) NewStruct() *keepSongR {
	return &keepSongR{}
}

// keepSongL is where Load methods for each relationship are stored.
type keepSongL struct{}

var (
	keepSongAllColumns            = []string{"keep_song_id", "keep_list_id", "song_info_id", "song_number", "created_at", "updated_at", "deleted_at"}
	keepSongColumnsWithoutDefault = []string{"keep_list_id", "song_info_id", "song_number", "deleted_at"}
	keepSongColumnsWithDefault    = []string{"keep_song_id", "created_at", "updated_at"}
	keepSongPrimaryKeyColumns     = []string{"keep_song_id"}
	keepSongGeneratedColumns      = []string{}
)

type (
	// KeepSongSlice is an alias for a slice of pointers to KeepSong.
	// This should almost always be used instead of []KeepSong.
	KeepSongSlice []*KeepSong
	// KeepSongHook is the signature for custom KeepSong hook methods
	KeepSongHook func(context.Context, boil.ContextExecutor, *KeepSong) error

	keepSongQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keepSongType                 = reflect.TypeOf(&KeepSong{})
	keepSongMapping              = queries.MakeStructMapping(keepSongType)
	keepSongPrimaryKeyMapping, _ = queries.BindMapping(keepSongType, keepSongMapping, keepSongPrimaryKeyColumns)
	keepSongInsertCacheMut       sync.RWMutex
	keepSongInsertCache          = make(map[string]insertCache)
	keepSongUpdateCacheMut       sync.RWMutex
	keepSongUpdateCache          = make(map[string]updateCache)
	keepSongUpsertCacheMut       sync.RWMutex
	keepSongUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var keepSongAfterSelectHooks []KeepSongHook

var keepSongBeforeInsertHooks []KeepSongHook
var keepSongAfterInsertHooks []KeepSongHook

var keepSongBeforeUpdateHooks []KeepSongHook
var keepSongAfterUpdateHooks []KeepSongHook

var keepSongBeforeDeleteHooks []KeepSongHook
var keepSongAfterDeleteHooks []KeepSongHook

var keepSongBeforeUpsertHooks []KeepSongHook
var keepSongAfterUpsertHooks []KeepSongHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KeepSong) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KeepSong) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KeepSong) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KeepSong) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KeepSong) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KeepSong) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KeepSong) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KeepSong) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KeepSong) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepSongAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKeepSongHook registers your hook function for all future operations.
func AddKeepSongHook(hookPoint boil.HookPoint, keepSongHook KeepSongHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		keepSongAfterSelectHooks = append(keepSongAfterSelectHooks, keepSongHook)
	case boil.BeforeInsertHook:
		keepSongBeforeInsertHooks = append(keepSongBeforeInsertHooks, keepSongHook)
	case boil.AfterInsertHook:
		keepSongAfterInsertHooks = append(keepSongAfterInsertHooks, keepSongHook)
	case boil.BeforeUpdateHook:
		keepSongBeforeUpdateHooks = append(keepSongBeforeUpdateHooks, keepSongHook)
	case boil.AfterUpdateHook:
		keepSongAfterUpdateHooks = append(keepSongAfterUpdateHooks, keepSongHook)
	case boil.BeforeDeleteHook:
		keepSongBeforeDeleteHooks = append(keepSongBeforeDeleteHooks, keepSongHook)
	case boil.AfterDeleteHook:
		keepSongAfterDeleteHooks = append(keepSongAfterDeleteHooks, keepSongHook)
	case boil.BeforeUpsertHook:
		keepSongBeforeUpsertHooks = append(keepSongBeforeUpsertHooks, keepSongHook)
	case boil.AfterUpsertHook:
		keepSongAfterUpsertHooks = append(keepSongAfterUpsertHooks, keepSongHook)
	}
}

// One returns a single keepSong record from the query.
func (q keepSongQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KeepSong, error) {
	o := &KeepSong{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for keep_song")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KeepSong records from the query.
func (q keepSongQuery) All(ctx context.Context, exec boil.ContextExecutor) (KeepSongSlice, error) {
	var o []*KeepSong

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to KeepSong slice")
	}

	if len(keepSongAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KeepSong records in the query.
func (q keepSongQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count keep_song rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q keepSongQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if keep_song exists")
	}

	return count > 0, nil
}

// KeepSongs retrieves all the records using an executor.
func KeepSongs(mods ...qm.QueryMod) keepSongQuery {
	mods = append(mods, qm.From("`keep_song`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`keep_song`.*"})
	}

	return keepSongQuery{q}
}

// FindKeepSong retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeepSong(ctx context.Context, exec boil.ContextExecutor, keepSongID int64, selectCols ...string) (*KeepSong, error) {
	keepSongObj := &KeepSong{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `keep_song` where `keep_song_id`=?", sel,
	)

	q := queries.Raw(query, keepSongID)

	err := q.Bind(ctx, exec, keepSongObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from keep_song")
	}

	if err = keepSongObj.doAfterSelectHooks(ctx, exec); err != nil {
		return keepSongObj, err
	}

	return keepSongObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KeepSong) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no keep_song provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepSongColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	keepSongInsertCacheMut.RLock()
	cache, cached := keepSongInsertCache[key]
	keepSongInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			keepSongAllColumns,
			keepSongColumnsWithDefault,
			keepSongColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(keepSongType, keepSongMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keepSongType, keepSongMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `keep_song` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `keep_song` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `keep_song` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, keepSongPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into keep_song")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.KeepSongID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == keepSongMapping["keep_song_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.KeepSongID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for keep_song")
	}

CacheNoHooks:
	if !cached {
		keepSongInsertCacheMut.Lock()
		keepSongInsertCache[key] = cache
		keepSongInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KeepSong.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KeepSong) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	keepSongUpdateCacheMut.RLock()
	cache, cached := keepSongUpdateCache[key]
	keepSongUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			keepSongAllColumns,
			keepSongPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update keep_song, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `keep_song` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, keepSongPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keepSongType, keepSongMapping, append(wl, keepSongPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update keep_song row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for keep_song")
	}

	if !cached {
		keepSongUpdateCacheMut.Lock()
		keepSongUpdateCache[key] = cache
		keepSongUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q keepSongQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for keep_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for keep_song")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeepSongSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `keep_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepSongPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in keepSong slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all keepSong")
	}
	return rowsAff, nil
}

var mySQLKeepSongUniqueColumns = []string{
	"keep_song_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KeepSong) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no keep_song provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepSongColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKeepSongUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keepSongUpsertCacheMut.RLock()
	cache, cached := keepSongUpsertCache[key]
	keepSongUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			keepSongAllColumns,
			keepSongColumnsWithDefault,
			keepSongColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			keepSongAllColumns,
			keepSongPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert keep_song, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`keep_song`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `keep_song` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(keepSongType, keepSongMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keepSongType, keepSongMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for keep_song")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.KeepSongID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == keepSongMapping["keep_song_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(keepSongType, keepSongMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for keep_song")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for keep_song")
	}

CacheNoHooks:
	if !cached {
		keepSongUpsertCacheMut.Lock()
		keepSongUpsertCache[key] = cache
		keepSongUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KeepSong record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KeepSong) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no KeepSong provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keepSongPrimaryKeyMapping)
	sql := "DELETE FROM `keep_song` WHERE `keep_song_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from keep_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for keep_song")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q keepSongQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no keepSongQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from keep_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for keep_song")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeepSongSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(keepSongBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `keep_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepSongPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from keepSong slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for keep_song")
	}

	if len(keepSongAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KeepSong) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKeepSong(ctx, exec, o.KeepSongID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeepSongSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KeepSongSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `keep_song`.* FROM `keep_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepSongPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in KeepSongSlice")
	}

	*o = slice

	return nil
}

// KeepSongExists checks if the KeepSong row exists.
func KeepSongExists(ctx context.Context, exec boil.ContextExecutor, keepSongID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `keep_song` where `keep_song_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, keepSongID)
	}
	row := exec.QueryRowContext(ctx, sql, keepSongID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if keep_song exists")
	}

	return exists, nil
}

// Exists checks if the KeepSong row exists.
func (o *KeepSong) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KeepSongExists(ctx, exec, o.KeepSongID)
}
