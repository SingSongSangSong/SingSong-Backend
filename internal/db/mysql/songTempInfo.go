// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SongTempInfo is an object representing the database table.
type SongTempInfo struct {
	SongTempId int64       `boil:"songTempId" json:"songTempId" toml:"songTempId" yaml:"songTempId"`
	SongName   string      `boil:"songName" json:"songName" toml:"songName" yaml:"songName"`
	ArtistName string      `boil:"artistName" json:"artistName" toml:"artistName" yaml:"artistName"`
	Album      null.String `boil:"album" json:"album,omitempty" toml:"album" yaml:"album,omitempty"`
	SongNumber int         `boil:"songNumber" json:"songNumber" toml:"songNumber" yaml:"songNumber"`
	Octave     null.String `boil:"octave" json:"octave,omitempty" toml:"octave" yaml:"octave,omitempty"`
	TjLink     null.String `boil:"tjLink" json:"tjLink,omitempty" toml:"tjLink" yaml:"tjLink,omitempty"`
	Tags       null.String `boil:"tags" json:"tags,omitempty" toml:"tags" yaml:"tags,omitempty"`

	R *songTempInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songTempInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongTempInfoColumns = struct {
	SongTempId string
	SongName   string
	ArtistName string
	Album      string
	SongNumber string
	Octave     string
	TjLink     string
	Tags       string
}{
	SongTempId: "songTempId",
	SongName:   "songName",
	ArtistName: "artistName",
	Album:      "album",
	SongNumber: "songNumber",
	Octave:     "octave",
	TjLink:     "tjLink",
	Tags:       "tags",
}

var SongTempInfoTableColumns = struct {
	SongTempId string
	SongName   string
	ArtistName string
	Album      string
	SongNumber string
	Octave     string
	TjLink     string
	Tags       string
}{
	SongTempId: "songTempInfo.songTempId",
	SongName:   "songTempInfo.songName",
	ArtistName: "songTempInfo.artistName",
	Album:      "songTempInfo.album",
	SongNumber: "songTempInfo.songNumber",
	Octave:     "songTempInfo.octave",
	TjLink:     "songTempInfo.tjLink",
	Tags:       "songTempInfo.tags",
}

// Generated where

var SongTempInfoWhere = struct {
	SongTempId whereHelperint64
	SongName   whereHelperstring
	ArtistName whereHelperstring
	Album      whereHelpernull_String
	SongNumber whereHelperint
	Octave     whereHelpernull_String
	TjLink     whereHelpernull_String
	Tags       whereHelpernull_String
}{
	SongTempId: whereHelperint64{field: "`songTempInfo`.`songTempId`"},
	SongName:   whereHelperstring{field: "`songTempInfo`.`songName`"},
	ArtistName: whereHelperstring{field: "`songTempInfo`.`artistName`"},
	Album:      whereHelpernull_String{field: "`songTempInfo`.`album`"},
	SongNumber: whereHelperint{field: "`songTempInfo`.`songNumber`"},
	Octave:     whereHelpernull_String{field: "`songTempInfo`.`octave`"},
	TjLink:     whereHelpernull_String{field: "`songTempInfo`.`tjLink`"},
	Tags:       whereHelpernull_String{field: "`songTempInfo`.`tags`"},
}

// SongTempInfoRels is where relationship names are stored.
var SongTempInfoRels = struct {
}{}

// songTempInfoR is where relationships are stored.
type songTempInfoR struct {
}

// NewStruct creates a new relationship struct
func (*songTempInfoR) NewStruct() *songTempInfoR {
	return &songTempInfoR{}
}

// songTempInfoL is where Load methods for each relationship are stored.
type songTempInfoL struct{}

var (
	songTempInfoAllColumns            = []string{"songTempId", "songName", "artistName", "album", "songNumber", "octave", "tjLink", "tags"}
	songTempInfoColumnsWithoutDefault = []string{"songName", "artistName", "album", "songNumber", "octave", "tjLink", "tags"}
	songTempInfoColumnsWithDefault    = []string{"songTempId"}
	songTempInfoPrimaryKeyColumns     = []string{"songTempId"}
	songTempInfoGeneratedColumns      = []string{}
)

type (
	// SongTempInfoSlice is an alias for a slice of pointers to SongTempInfo.
	// This should almost always be used instead of []SongTempInfo.
	SongTempInfoSlice []*SongTempInfo
	// SongTempInfoHook is the signature for custom SongTempInfo hook methods
	SongTempInfoHook func(context.Context, boil.ContextExecutor, *SongTempInfo) error

	songTempInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songTempInfoType                 = reflect.TypeOf(&SongTempInfo{})
	songTempInfoMapping              = queries.MakeStructMapping(songTempInfoType)
	songTempInfoPrimaryKeyMapping, _ = queries.BindMapping(songTempInfoType, songTempInfoMapping, songTempInfoPrimaryKeyColumns)
	songTempInfoInsertCacheMut       sync.RWMutex
	songTempInfoInsertCache          = make(map[string]insertCache)
	songTempInfoUpdateCacheMut       sync.RWMutex
	songTempInfoUpdateCache          = make(map[string]updateCache)
	songTempInfoUpsertCacheMut       sync.RWMutex
	songTempInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var songTempInfoAfterSelectHooks []SongTempInfoHook

var songTempInfoBeforeInsertHooks []SongTempInfoHook
var songTempInfoAfterInsertHooks []SongTempInfoHook

var songTempInfoBeforeUpdateHooks []SongTempInfoHook
var songTempInfoAfterUpdateHooks []SongTempInfoHook

var songTempInfoBeforeDeleteHooks []SongTempInfoHook
var songTempInfoAfterDeleteHooks []SongTempInfoHook

var songTempInfoBeforeUpsertHooks []SongTempInfoHook
var songTempInfoAfterUpsertHooks []SongTempInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SongTempInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SongTempInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SongTempInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SongTempInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SongTempInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SongTempInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SongTempInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SongTempInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SongTempInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songTempInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongTempInfoHook registers your hook function for all future operations.
func AddSongTempInfoHook(hookPoint boil.HookPoint, songTempInfoHook SongTempInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		songTempInfoAfterSelectHooks = append(songTempInfoAfterSelectHooks, songTempInfoHook)
	case boil.BeforeInsertHook:
		songTempInfoBeforeInsertHooks = append(songTempInfoBeforeInsertHooks, songTempInfoHook)
	case boil.AfterInsertHook:
		songTempInfoAfterInsertHooks = append(songTempInfoAfterInsertHooks, songTempInfoHook)
	case boil.BeforeUpdateHook:
		songTempInfoBeforeUpdateHooks = append(songTempInfoBeforeUpdateHooks, songTempInfoHook)
	case boil.AfterUpdateHook:
		songTempInfoAfterUpdateHooks = append(songTempInfoAfterUpdateHooks, songTempInfoHook)
	case boil.BeforeDeleteHook:
		songTempInfoBeforeDeleteHooks = append(songTempInfoBeforeDeleteHooks, songTempInfoHook)
	case boil.AfterDeleteHook:
		songTempInfoAfterDeleteHooks = append(songTempInfoAfterDeleteHooks, songTempInfoHook)
	case boil.BeforeUpsertHook:
		songTempInfoBeforeUpsertHooks = append(songTempInfoBeforeUpsertHooks, songTempInfoHook)
	case boil.AfterUpsertHook:
		songTempInfoAfterUpsertHooks = append(songTempInfoAfterUpsertHooks, songTempInfoHook)
	}
}

// One returns a single songTempInfo record from the query.
func (q songTempInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SongTempInfo, error) {
	o := &SongTempInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for songTempInfo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SongTempInfo records from the query.
func (q songTempInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (SongTempInfoSlice, error) {
	var o []*SongTempInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to SongTempInfo slice")
	}

	if len(songTempInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SongTempInfo records in the query.
func (q songTempInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count songTempInfo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q songTempInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if songTempInfo exists")
	}

	return count > 0, nil
}

// SongTempInfos retrieves all the records using an executor.
func SongTempInfos(mods ...qm.QueryMod) songTempInfoQuery {
	mods = append(mods, qm.From("`songTempInfo`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`songTempInfo`.*"})
	}

	return songTempInfoQuery{q}
}

// FindSongTempInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSongTempInfo(ctx context.Context, exec boil.ContextExecutor, songTempId int64, selectCols ...string) (*SongTempInfo, error) {
	songTempInfoObj := &SongTempInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `songTempInfo` where `songTempId`=?", sel,
	)

	q := queries.Raw(query, songTempId)

	err := q.Bind(ctx, exec, songTempInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from songTempInfo")
	}

	if err = songTempInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return songTempInfoObj, err
	}

	return songTempInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SongTempInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no songTempInfo provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songTempInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	songTempInfoInsertCacheMut.RLock()
	cache, cached := songTempInfoInsertCache[key]
	songTempInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			songTempInfoAllColumns,
			songTempInfoColumnsWithDefault,
			songTempInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(songTempInfoType, songTempInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songTempInfoType, songTempInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `songTempInfo` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `songTempInfo` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `songTempInfo` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, songTempInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into songTempInfo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SongTempId = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songTempInfoMapping["songTempId"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SongTempId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for songTempInfo")
	}

CacheNoHooks:
	if !cached {
		songTempInfoInsertCacheMut.Lock()
		songTempInfoInsertCache[key] = cache
		songTempInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SongTempInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SongTempInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	songTempInfoUpdateCacheMut.RLock()
	cache, cached := songTempInfoUpdateCache[key]
	songTempInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			songTempInfoAllColumns,
			songTempInfoPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update songTempInfo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `songTempInfo` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, songTempInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songTempInfoType, songTempInfoMapping, append(wl, songTempInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update songTempInfo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for songTempInfo")
	}

	if !cached {
		songTempInfoUpdateCacheMut.Lock()
		songTempInfoUpdateCache[key] = cache
		songTempInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q songTempInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for songTempInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for songTempInfo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongTempInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songTempInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `songTempInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songTempInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in songTempInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all songTempInfo")
	}
	return rowsAff, nil
}

var mySQLSongTempInfoUniqueColumns = []string{
	"songTempId",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SongTempInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no songTempInfo provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songTempInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSongTempInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songTempInfoUpsertCacheMut.RLock()
	cache, cached := songTempInfoUpsertCache[key]
	songTempInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			songTempInfoAllColumns,
			songTempInfoColumnsWithDefault,
			songTempInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			songTempInfoAllColumns,
			songTempInfoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert songTempInfo, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`songTempInfo`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `songTempInfo` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(songTempInfoType, songTempInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songTempInfoType, songTempInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for songTempInfo")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SongTempId = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songTempInfoMapping["songTempId"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(songTempInfoType, songTempInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for songTempInfo")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for songTempInfo")
	}

CacheNoHooks:
	if !cached {
		songTempInfoUpsertCacheMut.Lock()
		songTempInfoUpsertCache[key] = cache
		songTempInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SongTempInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SongTempInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no SongTempInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songTempInfoPrimaryKeyMapping)
	sql := "DELETE FROM `songTempInfo` WHERE `songTempId`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from songTempInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for songTempInfo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q songTempInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no songTempInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from songTempInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for songTempInfo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongTempInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(songTempInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songTempInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `songTempInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songTempInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from songTempInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for songTempInfo")
	}

	if len(songTempInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SongTempInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSongTempInfo(ctx, exec, o.SongTempId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongTempInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SongTempInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songTempInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `songTempInfo`.* FROM `songTempInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songTempInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in SongTempInfoSlice")
	}

	*o = slice

	return nil
}

// SongTempInfoExists checks if the SongTempInfo row exists.
func SongTempInfoExists(ctx context.Context, exec boil.ContextExecutor, songTempId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `songTempInfo` where `songTempId`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, songTempId)
	}
	row := exec.QueryRowContext(ctx, sql, songTempId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if songTempInfo exists")
	}

	return exists, nil
}

// Exists checks if the SongTempInfo row exists.
func (o *SongTempInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SongTempInfoExists(ctx, exec, o.SongTempId)
}
