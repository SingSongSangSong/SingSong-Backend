// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostCommentLike is an object representing the database table.
type PostCommentLike struct {
	PostCommentLikeID int64     `boil:"post_comment_like_id" json:"post_comment_like_id" toml:"post_comment_like_id" yaml:"post_comment_like_id"`
	MemberID          int64     `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	PostCommentID     int64     `boil:"post_comment_id" json:"post_comment_id" toml:"post_comment_id" yaml:"post_comment_id"`
	CreatedAt         null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt         null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt         null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *postCommentLikeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postCommentLikeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostCommentLikeColumns = struct {
	PostCommentLikeID string
	MemberID          string
	PostCommentID     string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	PostCommentLikeID: "post_comment_like_id",
	MemberID:          "member_id",
	PostCommentID:     "post_comment_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var PostCommentLikeTableColumns = struct {
	PostCommentLikeID string
	MemberID          string
	PostCommentID     string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	PostCommentLikeID: "post_comment_like.post_comment_like_id",
	MemberID:          "post_comment_like.member_id",
	PostCommentID:     "post_comment_like.post_comment_id",
	CreatedAt:         "post_comment_like.created_at",
	UpdatedAt:         "post_comment_like.updated_at",
	DeletedAt:         "post_comment_like.deleted_at",
}

// Generated where

var PostCommentLikeWhere = struct {
	PostCommentLikeID whereHelperint64
	MemberID          whereHelperint64
	PostCommentID     whereHelperint64
	CreatedAt         whereHelpernull_Time
	UpdatedAt         whereHelpernull_Time
	DeletedAt         whereHelpernull_Time
}{
	PostCommentLikeID: whereHelperint64{field: "`post_comment_like`.`post_comment_like_id`"},
	MemberID:          whereHelperint64{field: "`post_comment_like`.`member_id`"},
	PostCommentID:     whereHelperint64{field: "`post_comment_like`.`post_comment_id`"},
	CreatedAt:         whereHelpernull_Time{field: "`post_comment_like`.`created_at`"},
	UpdatedAt:         whereHelpernull_Time{field: "`post_comment_like`.`updated_at`"},
	DeletedAt:         whereHelpernull_Time{field: "`post_comment_like`.`deleted_at`"},
}

// PostCommentLikeRels is where relationship names are stored.
var PostCommentLikeRels = struct {
}{}

// postCommentLikeR is where relationships are stored.
type postCommentLikeR struct {
}

// NewStruct creates a new relationship struct
func (*postCommentLikeR) NewStruct() *postCommentLikeR {
	return &postCommentLikeR{}
}

// postCommentLikeL is where Load methods for each relationship are stored.
type postCommentLikeL struct{}

var (
	postCommentLikeAllColumns            = []string{"post_comment_like_id", "member_id", "post_comment_id", "created_at", "updated_at", "deleted_at"}
	postCommentLikeColumnsWithoutDefault = []string{"member_id", "post_comment_id", "deleted_at"}
	postCommentLikeColumnsWithDefault    = []string{"post_comment_like_id", "created_at", "updated_at"}
	postCommentLikePrimaryKeyColumns     = []string{"post_comment_like_id"}
	postCommentLikeGeneratedColumns      = []string{}
)

type (
	// PostCommentLikeSlice is an alias for a slice of pointers to PostCommentLike.
	// This should almost always be used instead of []PostCommentLike.
	PostCommentLikeSlice []*PostCommentLike
	// PostCommentLikeHook is the signature for custom PostCommentLike hook methods
	PostCommentLikeHook func(context.Context, boil.ContextExecutor, *PostCommentLike) error

	postCommentLikeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postCommentLikeType                 = reflect.TypeOf(&PostCommentLike{})
	postCommentLikeMapping              = queries.MakeStructMapping(postCommentLikeType)
	postCommentLikePrimaryKeyMapping, _ = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, postCommentLikePrimaryKeyColumns)
	postCommentLikeInsertCacheMut       sync.RWMutex
	postCommentLikeInsertCache          = make(map[string]insertCache)
	postCommentLikeUpdateCacheMut       sync.RWMutex
	postCommentLikeUpdateCache          = make(map[string]updateCache)
	postCommentLikeUpsertCacheMut       sync.RWMutex
	postCommentLikeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postCommentLikeAfterSelectHooks []PostCommentLikeHook

var postCommentLikeBeforeInsertHooks []PostCommentLikeHook
var postCommentLikeAfterInsertHooks []PostCommentLikeHook

var postCommentLikeBeforeUpdateHooks []PostCommentLikeHook
var postCommentLikeAfterUpdateHooks []PostCommentLikeHook

var postCommentLikeBeforeDeleteHooks []PostCommentLikeHook
var postCommentLikeAfterDeleteHooks []PostCommentLikeHook

var postCommentLikeBeforeUpsertHooks []PostCommentLikeHook
var postCommentLikeAfterUpsertHooks []PostCommentLikeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostCommentLike) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostCommentLike) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostCommentLike) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostCommentLike) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostCommentLike) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostCommentLike) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostCommentLike) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostCommentLike) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostCommentLike) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentLikeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostCommentLikeHook registers your hook function for all future operations.
func AddPostCommentLikeHook(hookPoint boil.HookPoint, postCommentLikeHook PostCommentLikeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postCommentLikeAfterSelectHooks = append(postCommentLikeAfterSelectHooks, postCommentLikeHook)
	case boil.BeforeInsertHook:
		postCommentLikeBeforeInsertHooks = append(postCommentLikeBeforeInsertHooks, postCommentLikeHook)
	case boil.AfterInsertHook:
		postCommentLikeAfterInsertHooks = append(postCommentLikeAfterInsertHooks, postCommentLikeHook)
	case boil.BeforeUpdateHook:
		postCommentLikeBeforeUpdateHooks = append(postCommentLikeBeforeUpdateHooks, postCommentLikeHook)
	case boil.AfterUpdateHook:
		postCommentLikeAfterUpdateHooks = append(postCommentLikeAfterUpdateHooks, postCommentLikeHook)
	case boil.BeforeDeleteHook:
		postCommentLikeBeforeDeleteHooks = append(postCommentLikeBeforeDeleteHooks, postCommentLikeHook)
	case boil.AfterDeleteHook:
		postCommentLikeAfterDeleteHooks = append(postCommentLikeAfterDeleteHooks, postCommentLikeHook)
	case boil.BeforeUpsertHook:
		postCommentLikeBeforeUpsertHooks = append(postCommentLikeBeforeUpsertHooks, postCommentLikeHook)
	case boil.AfterUpsertHook:
		postCommentLikeAfterUpsertHooks = append(postCommentLikeAfterUpsertHooks, postCommentLikeHook)
	}
}

// One returns a single postCommentLike record from the query.
func (q postCommentLikeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostCommentLike, error) {
	o := &PostCommentLike{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for post_comment_like")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostCommentLike records from the query.
func (q postCommentLikeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostCommentLikeSlice, error) {
	var o []*PostCommentLike

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to PostCommentLike slice")
	}

	if len(postCommentLikeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostCommentLike records in the query.
func (q postCommentLikeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count post_comment_like rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postCommentLikeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if post_comment_like exists")
	}

	return count > 0, nil
}

// PostCommentLikes retrieves all the records using an executor.
func PostCommentLikes(mods ...qm.QueryMod) postCommentLikeQuery {
	mods = append(mods, qm.From("`post_comment_like`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`post_comment_like`.*"})
	}

	return postCommentLikeQuery{q}
}

// FindPostCommentLike retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostCommentLike(ctx context.Context, exec boil.ContextExecutor, postCommentLikeID int64, selectCols ...string) (*PostCommentLike, error) {
	postCommentLikeObj := &PostCommentLike{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `post_comment_like` where `post_comment_like_id`=?", sel,
	)

	q := queries.Raw(query, postCommentLikeID)

	err := q.Bind(ctx, exec, postCommentLikeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from post_comment_like")
	}

	if err = postCommentLikeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postCommentLikeObj, err
	}

	return postCommentLikeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostCommentLike) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_comment_like provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentLikeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postCommentLikeInsertCacheMut.RLock()
	cache, cached := postCommentLikeInsertCache[key]
	postCommentLikeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postCommentLikeAllColumns,
			postCommentLikeColumnsWithDefault,
			postCommentLikeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `post_comment_like` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `post_comment_like` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `post_comment_like` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, postCommentLikePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into post_comment_like")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostCommentLikeID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postCommentLikeMapping["post_comment_like_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PostCommentLikeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_comment_like")
	}

CacheNoHooks:
	if !cached {
		postCommentLikeInsertCacheMut.Lock()
		postCommentLikeInsertCache[key] = cache
		postCommentLikeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostCommentLike.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostCommentLike) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postCommentLikeUpdateCacheMut.RLock()
	cache, cached := postCommentLikeUpdateCache[key]
	postCommentLikeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postCommentLikeAllColumns,
			postCommentLikePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update post_comment_like, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `post_comment_like` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, postCommentLikePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, append(wl, postCommentLikePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update post_comment_like row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for post_comment_like")
	}

	if !cached {
		postCommentLikeUpdateCacheMut.Lock()
		postCommentLikeUpdateCache[key] = cache
		postCommentLikeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postCommentLikeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for post_comment_like")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for post_comment_like")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostCommentLikeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `post_comment_like` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentLikePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in postCommentLike slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all postCommentLike")
	}
	return rowsAff, nil
}

var mySQLPostCommentLikeUniqueColumns = []string{
	"post_comment_like_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostCommentLike) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_comment_like provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentLikeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPostCommentLikeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postCommentLikeUpsertCacheMut.RLock()
	cache, cached := postCommentLikeUpsertCache[key]
	postCommentLikeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			postCommentLikeAllColumns,
			postCommentLikeColumnsWithDefault,
			postCommentLikeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postCommentLikeAllColumns,
			postCommentLikePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert post_comment_like, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`post_comment_like`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `post_comment_like` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for post_comment_like")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostCommentLikeID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postCommentLikeMapping["post_comment_like_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(postCommentLikeType, postCommentLikeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for post_comment_like")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_comment_like")
	}

CacheNoHooks:
	if !cached {
		postCommentLikeUpsertCacheMut.Lock()
		postCommentLikeUpsertCache[key] = cache
		postCommentLikeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostCommentLike record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostCommentLike) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no PostCommentLike provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postCommentLikePrimaryKeyMapping)
	sql := "DELETE FROM `post_comment_like` WHERE `post_comment_like_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from post_comment_like")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for post_comment_like")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postCommentLikeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no postCommentLikeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from post_comment_like")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_comment_like")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostCommentLikeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postCommentLikeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `post_comment_like` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentLikePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from postCommentLike slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_comment_like")
	}

	if len(postCommentLikeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostCommentLike) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostCommentLike(ctx, exec, o.PostCommentLikeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostCommentLikeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostCommentLikeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `post_comment_like`.* FROM `post_comment_like` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentLikePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in PostCommentLikeSlice")
	}

	*o = slice

	return nil
}

// PostCommentLikeExists checks if the PostCommentLike row exists.
func PostCommentLikeExists(ctx context.Context, exec boil.ContextExecutor, postCommentLikeID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `post_comment_like` where `post_comment_like_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, postCommentLikeID)
	}
	row := exec.QueryRowContext(ctx, sql, postCommentLikeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if post_comment_like exists")
	}

	return exists, nil
}

// Exists checks if the PostCommentLike row exists.
func (o *PostCommentLike) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostCommentLikeExists(ctx, exec, o.PostCommentLikeID)
}
