// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SongReview is an object representing the database table.
type SongReview struct {
	SongReviewID       int64       `boil:"song_review_id" json:"song_review_id" toml:"song_review_id" yaml:"song_review_id"`
	SongInfoID         int64       `boil:"song_info_id" json:"song_info_id" toml:"song_info_id" yaml:"song_info_id"`
	MemberID           int64       `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	SongReviewOptionID int64       `boil:"song_review_option_id" json:"song_review_option_id" toml:"song_review_option_id" yaml:"song_review_option_id"`
	Gender             null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	Birthyear          null.Int    `boil:"birthyear" json:"birthyear,omitempty" toml:"birthyear" yaml:"birthyear,omitempty"`
	CreatedAt          null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt          null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *songReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongReviewColumns = struct {
	SongReviewID       string
	SongInfoID         string
	MemberID           string
	SongReviewOptionID string
	Gender             string
	Birthyear          string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	SongReviewID:       "song_review_id",
	SongInfoID:         "song_info_id",
	MemberID:           "member_id",
	SongReviewOptionID: "song_review_option_id",
	Gender:             "gender",
	Birthyear:          "birthyear",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var SongReviewTableColumns = struct {
	SongReviewID       string
	SongInfoID         string
	MemberID           string
	SongReviewOptionID string
	Gender             string
	Birthyear          string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	SongReviewID:       "song_review.song_review_id",
	SongInfoID:         "song_review.song_info_id",
	MemberID:           "song_review.member_id",
	SongReviewOptionID: "song_review.song_review_option_id",
	Gender:             "song_review.gender",
	Birthyear:          "song_review.birthyear",
	CreatedAt:          "song_review.created_at",
	UpdatedAt:          "song_review.updated_at",
	DeletedAt:          "song_review.deleted_at",
}

// Generated where

var SongReviewWhere = struct {
	SongReviewID       whereHelperint64
	SongInfoID         whereHelperint64
	MemberID           whereHelperint64
	SongReviewOptionID whereHelperint64
	Gender             whereHelpernull_String
	Birthyear          whereHelpernull_Int
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
	DeletedAt          whereHelpernull_Time
}{
	SongReviewID:       whereHelperint64{field: "`song_review`.`song_review_id`"},
	SongInfoID:         whereHelperint64{field: "`song_review`.`song_info_id`"},
	MemberID:           whereHelperint64{field: "`song_review`.`member_id`"},
	SongReviewOptionID: whereHelperint64{field: "`song_review`.`song_review_option_id`"},
	Gender:             whereHelpernull_String{field: "`song_review`.`gender`"},
	Birthyear:          whereHelpernull_Int{field: "`song_review`.`birthyear`"},
	CreatedAt:          whereHelpernull_Time{field: "`song_review`.`created_at`"},
	UpdatedAt:          whereHelpernull_Time{field: "`song_review`.`updated_at`"},
	DeletedAt:          whereHelpernull_Time{field: "`song_review`.`deleted_at`"},
}

// SongReviewRels is where relationship names are stored.
var SongReviewRels = struct {
}{}

// songReviewR is where relationships are stored.
type songReviewR struct {
}

// NewStruct creates a new relationship struct
func (*songReviewR) NewStruct() *songReviewR {
	return &songReviewR{}
}

// songReviewL is where Load methods for each relationship are stored.
type songReviewL struct{}

var (
	songReviewAllColumns            = []string{"song_review_id", "song_info_id", "member_id", "song_review_option_id", "gender", "birthyear", "created_at", "updated_at", "deleted_at"}
	songReviewColumnsWithoutDefault = []string{"song_info_id", "member_id", "song_review_option_id", "gender", "birthyear", "deleted_at"}
	songReviewColumnsWithDefault    = []string{"song_review_id", "created_at", "updated_at"}
	songReviewPrimaryKeyColumns     = []string{"song_review_id"}
	songReviewGeneratedColumns      = []string{}
)

type (
	// SongReviewSlice is an alias for a slice of pointers to SongReview.
	// This should almost always be used instead of []SongReview.
	SongReviewSlice []*SongReview
	// SongReviewHook is the signature for custom SongReview hook methods
	SongReviewHook func(context.Context, boil.ContextExecutor, *SongReview) error

	songReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songReviewType                 = reflect.TypeOf(&SongReview{})
	songReviewMapping              = queries.MakeStructMapping(songReviewType)
	songReviewPrimaryKeyMapping, _ = queries.BindMapping(songReviewType, songReviewMapping, songReviewPrimaryKeyColumns)
	songReviewInsertCacheMut       sync.RWMutex
	songReviewInsertCache          = make(map[string]insertCache)
	songReviewUpdateCacheMut       sync.RWMutex
	songReviewUpdateCache          = make(map[string]updateCache)
	songReviewUpsertCacheMut       sync.RWMutex
	songReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var songReviewAfterSelectHooks []SongReviewHook

var songReviewBeforeInsertHooks []SongReviewHook
var songReviewAfterInsertHooks []SongReviewHook

var songReviewBeforeUpdateHooks []SongReviewHook
var songReviewAfterUpdateHooks []SongReviewHook

var songReviewBeforeDeleteHooks []SongReviewHook
var songReviewAfterDeleteHooks []SongReviewHook

var songReviewBeforeUpsertHooks []SongReviewHook
var songReviewAfterUpsertHooks []SongReviewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SongReview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SongReview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SongReview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SongReview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SongReview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SongReview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SongReview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SongReview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SongReview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songReviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongReviewHook registers your hook function for all future operations.
func AddSongReviewHook(hookPoint boil.HookPoint, songReviewHook SongReviewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		songReviewAfterSelectHooks = append(songReviewAfterSelectHooks, songReviewHook)
	case boil.BeforeInsertHook:
		songReviewBeforeInsertHooks = append(songReviewBeforeInsertHooks, songReviewHook)
	case boil.AfterInsertHook:
		songReviewAfterInsertHooks = append(songReviewAfterInsertHooks, songReviewHook)
	case boil.BeforeUpdateHook:
		songReviewBeforeUpdateHooks = append(songReviewBeforeUpdateHooks, songReviewHook)
	case boil.AfterUpdateHook:
		songReviewAfterUpdateHooks = append(songReviewAfterUpdateHooks, songReviewHook)
	case boil.BeforeDeleteHook:
		songReviewBeforeDeleteHooks = append(songReviewBeforeDeleteHooks, songReviewHook)
	case boil.AfterDeleteHook:
		songReviewAfterDeleteHooks = append(songReviewAfterDeleteHooks, songReviewHook)
	case boil.BeforeUpsertHook:
		songReviewBeforeUpsertHooks = append(songReviewBeforeUpsertHooks, songReviewHook)
	case boil.AfterUpsertHook:
		songReviewAfterUpsertHooks = append(songReviewAfterUpsertHooks, songReviewHook)
	}
}

// One returns a single songReview record from the query.
func (q songReviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SongReview, error) {
	o := &SongReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for song_review")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SongReview records from the query.
func (q songReviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (SongReviewSlice, error) {
	var o []*SongReview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to SongReview slice")
	}

	if len(songReviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SongReview records in the query.
func (q songReviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count song_review rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q songReviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if song_review exists")
	}

	return count > 0, nil
}

// SongReviews retrieves all the records using an executor.
func SongReviews(mods ...qm.QueryMod) songReviewQuery {
	mods = append(mods, qm.From("`song_review`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`song_review`.*"})
	}

	return songReviewQuery{q}
}

// FindSongReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSongReview(ctx context.Context, exec boil.ContextExecutor, songReviewID int64, selectCols ...string) (*SongReview, error) {
	songReviewObj := &SongReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `song_review` where `song_review_id`=?", sel,
	)

	q := queries.Raw(query, songReviewID)

	err := q.Bind(ctx, exec, songReviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from song_review")
	}

	if err = songReviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return songReviewObj, err
	}

	return songReviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SongReview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no song_review provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songReviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	songReviewInsertCacheMut.RLock()
	cache, cached := songReviewInsertCache[key]
	songReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			songReviewAllColumns,
			songReviewColumnsWithDefault,
			songReviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(songReviewType, songReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songReviewType, songReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `song_review` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `song_review` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `song_review` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, songReviewPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into song_review")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SongReviewID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songReviewMapping["song_review_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SongReviewID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for song_review")
	}

CacheNoHooks:
	if !cached {
		songReviewInsertCacheMut.Lock()
		songReviewInsertCache[key] = cache
		songReviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SongReview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SongReview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	songReviewUpdateCacheMut.RLock()
	cache, cached := songReviewUpdateCache[key]
	songReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			songReviewAllColumns,
			songReviewPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update song_review, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `song_review` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, songReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songReviewType, songReviewMapping, append(wl, songReviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update song_review row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for song_review")
	}

	if !cached {
		songReviewUpdateCacheMut.Lock()
		songReviewUpdateCache[key] = cache
		songReviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q songReviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for song_review")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for song_review")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `song_review` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songReviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in songReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all songReview")
	}
	return rowsAff, nil
}

var mySQLSongReviewUniqueColumns = []string{
	"song_review_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SongReview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no song_review provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songReviewColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSongReviewUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songReviewUpsertCacheMut.RLock()
	cache, cached := songReviewUpsertCache[key]
	songReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			songReviewAllColumns,
			songReviewColumnsWithDefault,
			songReviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			songReviewAllColumns,
			songReviewPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert song_review, could not build update column list")
		}

		ret := strmangle.SetComplement(songReviewAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`song_review`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `song_review` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(songReviewType, songReviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songReviewType, songReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for song_review")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SongReviewID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songReviewMapping["song_review_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(songReviewType, songReviewMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for song_review")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for song_review")
	}

CacheNoHooks:
	if !cached {
		songReviewUpsertCacheMut.Lock()
		songReviewUpsertCache[key] = cache
		songReviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SongReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SongReview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no SongReview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songReviewPrimaryKeyMapping)
	sql := "DELETE FROM `song_review` WHERE `song_review_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from song_review")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for song_review")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q songReviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no songReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from song_review")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for song_review")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(songReviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `song_review` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songReviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from songReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for song_review")
	}

	if len(songReviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SongReview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSongReview(ctx, exec, o.SongReviewID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SongReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `song_review`.* FROM `song_review` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songReviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in SongReviewSlice")
	}

	*o = slice

	return nil
}

// SongReviewExists checks if the SongReview row exists.
func SongReviewExists(ctx context.Context, exec boil.ContextExecutor, songReviewID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `song_review` where `song_review_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, songReviewID)
	}
	row := exec.QueryRowContext(ctx, sql, songReviewID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if song_review exists")
	}

	return exists, nil
}

// Exists checks if the SongReview row exists.
func (o *SongReview) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SongReviewExists(ctx, exec, o.SongReviewID)
}
