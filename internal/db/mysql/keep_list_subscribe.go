// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KeepListSubscribe is an object representing the database table.
type KeepListSubscribe struct {
	KeepListSubscribeID int64     `boil:"keep_list_subscribe_id" json:"keep_list_subscribe_id" toml:"keep_list_subscribe_id" yaml:"keep_list_subscribe_id"`
	MemberID            int64     `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	KeepListID          int64     `boil:"keep_list_id" json:"keep_list_id" toml:"keep_list_id" yaml:"keep_list_id"`
	CreatedAt           null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt           null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt           null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *keepListSubscribeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keepListSubscribeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeepListSubscribeColumns = struct {
	KeepListSubscribeID string
	MemberID            string
	KeepListID          string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	KeepListSubscribeID: "keep_list_subscribe_id",
	MemberID:            "member_id",
	KeepListID:          "keep_list_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var KeepListSubscribeTableColumns = struct {
	KeepListSubscribeID string
	MemberID            string
	KeepListID          string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	KeepListSubscribeID: "keep_list_subscribe.keep_list_subscribe_id",
	MemberID:            "keep_list_subscribe.member_id",
	KeepListID:          "keep_list_subscribe.keep_list_id",
	CreatedAt:           "keep_list_subscribe.created_at",
	UpdatedAt:           "keep_list_subscribe.updated_at",
	DeletedAt:           "keep_list_subscribe.deleted_at",
}

// Generated where

var KeepListSubscribeWhere = struct {
	KeepListSubscribeID whereHelperint64
	MemberID            whereHelperint64
	KeepListID          whereHelperint64
	CreatedAt           whereHelpernull_Time
	UpdatedAt           whereHelpernull_Time
	DeletedAt           whereHelpernull_Time
}{
	KeepListSubscribeID: whereHelperint64{field: "`keep_list_subscribe`.`keep_list_subscribe_id`"},
	MemberID:            whereHelperint64{field: "`keep_list_subscribe`.`member_id`"},
	KeepListID:          whereHelperint64{field: "`keep_list_subscribe`.`keep_list_id`"},
	CreatedAt:           whereHelpernull_Time{field: "`keep_list_subscribe`.`created_at`"},
	UpdatedAt:           whereHelpernull_Time{field: "`keep_list_subscribe`.`updated_at`"},
	DeletedAt:           whereHelpernull_Time{field: "`keep_list_subscribe`.`deleted_at`"},
}

// KeepListSubscribeRels is where relationship names are stored.
var KeepListSubscribeRels = struct {
	Member   string
	KeepList string
}{
	Member:   "Member",
	KeepList: "KeepList",
}

// keepListSubscribeR is where relationships are stored.
type keepListSubscribeR struct {
	Member   *Member   `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
	KeepList *KeepList `boil:"KeepList" json:"KeepList" toml:"KeepList" yaml:"KeepList"`
}

// NewStruct creates a new relationship struct
func (*keepListSubscribeR) NewStruct() *keepListSubscribeR {
	return &keepListSubscribeR{}
}

func (r *keepListSubscribeR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

func (r *keepListSubscribeR) GetKeepList() *KeepList {
	if r == nil {
		return nil
	}
	return r.KeepList
}

// keepListSubscribeL is where Load methods for each relationship are stored.
type keepListSubscribeL struct{}

var (
	keepListSubscribeAllColumns            = []string{"keep_list_subscribe_id", "member_id", "keep_list_id", "created_at", "updated_at", "deleted_at"}
	keepListSubscribeColumnsWithoutDefault = []string{"member_id", "keep_list_id", "deleted_at"}
	keepListSubscribeColumnsWithDefault    = []string{"keep_list_subscribe_id", "created_at", "updated_at"}
	keepListSubscribePrimaryKeyColumns     = []string{"keep_list_subscribe_id"}
	keepListSubscribeGeneratedColumns      = []string{}
)

type (
	// KeepListSubscribeSlice is an alias for a slice of pointers to KeepListSubscribe.
	// This should almost always be used instead of []KeepListSubscribe.
	KeepListSubscribeSlice []*KeepListSubscribe
	// KeepListSubscribeHook is the signature for custom KeepListSubscribe hook methods
	KeepListSubscribeHook func(context.Context, boil.ContextExecutor, *KeepListSubscribe) error

	keepListSubscribeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keepListSubscribeType                 = reflect.TypeOf(&KeepListSubscribe{})
	keepListSubscribeMapping              = queries.MakeStructMapping(keepListSubscribeType)
	keepListSubscribePrimaryKeyMapping, _ = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, keepListSubscribePrimaryKeyColumns)
	keepListSubscribeInsertCacheMut       sync.RWMutex
	keepListSubscribeInsertCache          = make(map[string]insertCache)
	keepListSubscribeUpdateCacheMut       sync.RWMutex
	keepListSubscribeUpdateCache          = make(map[string]updateCache)
	keepListSubscribeUpsertCacheMut       sync.RWMutex
	keepListSubscribeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var keepListSubscribeAfterSelectHooks []KeepListSubscribeHook

var keepListSubscribeBeforeInsertHooks []KeepListSubscribeHook
var keepListSubscribeAfterInsertHooks []KeepListSubscribeHook

var keepListSubscribeBeforeUpdateHooks []KeepListSubscribeHook
var keepListSubscribeAfterUpdateHooks []KeepListSubscribeHook

var keepListSubscribeBeforeDeleteHooks []KeepListSubscribeHook
var keepListSubscribeAfterDeleteHooks []KeepListSubscribeHook

var keepListSubscribeBeforeUpsertHooks []KeepListSubscribeHook
var keepListSubscribeAfterUpsertHooks []KeepListSubscribeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KeepListSubscribe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KeepListSubscribe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KeepListSubscribe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KeepListSubscribe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KeepListSubscribe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KeepListSubscribe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KeepListSubscribe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KeepListSubscribe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KeepListSubscribe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListSubscribeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKeepListSubscribeHook registers your hook function for all future operations.
func AddKeepListSubscribeHook(hookPoint boil.HookPoint, keepListSubscribeHook KeepListSubscribeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		keepListSubscribeAfterSelectHooks = append(keepListSubscribeAfterSelectHooks, keepListSubscribeHook)
	case boil.BeforeInsertHook:
		keepListSubscribeBeforeInsertHooks = append(keepListSubscribeBeforeInsertHooks, keepListSubscribeHook)
	case boil.AfterInsertHook:
		keepListSubscribeAfterInsertHooks = append(keepListSubscribeAfterInsertHooks, keepListSubscribeHook)
	case boil.BeforeUpdateHook:
		keepListSubscribeBeforeUpdateHooks = append(keepListSubscribeBeforeUpdateHooks, keepListSubscribeHook)
	case boil.AfterUpdateHook:
		keepListSubscribeAfterUpdateHooks = append(keepListSubscribeAfterUpdateHooks, keepListSubscribeHook)
	case boil.BeforeDeleteHook:
		keepListSubscribeBeforeDeleteHooks = append(keepListSubscribeBeforeDeleteHooks, keepListSubscribeHook)
	case boil.AfterDeleteHook:
		keepListSubscribeAfterDeleteHooks = append(keepListSubscribeAfterDeleteHooks, keepListSubscribeHook)
	case boil.BeforeUpsertHook:
		keepListSubscribeBeforeUpsertHooks = append(keepListSubscribeBeforeUpsertHooks, keepListSubscribeHook)
	case boil.AfterUpsertHook:
		keepListSubscribeAfterUpsertHooks = append(keepListSubscribeAfterUpsertHooks, keepListSubscribeHook)
	}
}

// One returns a single keepListSubscribe record from the query.
func (q keepListSubscribeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KeepListSubscribe, error) {
	o := &KeepListSubscribe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for keep_list_subscribe")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KeepListSubscribe records from the query.
func (q keepListSubscribeQuery) All(ctx context.Context, exec boil.ContextExecutor) (KeepListSubscribeSlice, error) {
	var o []*KeepListSubscribe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to KeepListSubscribe slice")
	}

	if len(keepListSubscribeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KeepListSubscribe records in the query.
func (q keepListSubscribeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count keep_list_subscribe rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q keepListSubscribeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if keep_list_subscribe exists")
	}

	return count > 0, nil
}

// Member pointed to by the foreign key.
func (o *KeepListSubscribe) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// KeepList pointed to by the foreign key.
func (o *KeepListSubscribe) KeepList(mods ...qm.QueryMod) keepListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`keep_list_id` = ?", o.KeepListID),
	}

	queryMods = append(queryMods, mods...)

	return KeepLists(queryMods...)
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (keepListSubscribeL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKeepListSubscribe interface{}, mods queries.Applicator) error {
	var slice []*KeepListSubscribe
	var object *KeepListSubscribe

	if singular {
		var ok bool
		object, ok = maybeKeepListSubscribe.(*KeepListSubscribe)
		if !ok {
			object = new(KeepListSubscribe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeKeepListSubscribe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeKeepListSubscribe))
			}
		}
	} else {
		s, ok := maybeKeepListSubscribe.(*[]*KeepListSubscribe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeKeepListSubscribe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeKeepListSubscribe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &keepListSubscribeR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &keepListSubscribeR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.KeepListSubscribes = append(foreign.R.KeepListSubscribes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.KeepListSubscribes = append(foreign.R.KeepListSubscribes, local)
				break
			}
		}
	}

	return nil
}

// LoadKeepList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (keepListSubscribeL) LoadKeepList(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKeepListSubscribe interface{}, mods queries.Applicator) error {
	var slice []*KeepListSubscribe
	var object *KeepListSubscribe

	if singular {
		var ok bool
		object, ok = maybeKeepListSubscribe.(*KeepListSubscribe)
		if !ok {
			object = new(KeepListSubscribe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeKeepListSubscribe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeKeepListSubscribe))
			}
		}
	} else {
		s, ok := maybeKeepListSubscribe.(*[]*KeepListSubscribe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeKeepListSubscribe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeKeepListSubscribe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &keepListSubscribeR{}
		}
		args = append(args, object.KeepListID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &keepListSubscribeR{}
			}

			for _, a := range args {
				if a == obj.KeepListID {
					continue Outer
				}
			}

			args = append(args, obj.KeepListID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`keep_list`),
		qm.WhereIn(`keep_list.keep_list_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load KeepList")
	}

	var resultSlice []*KeepList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice KeepList")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for keep_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for keep_list")
	}

	if len(keepListAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.KeepList = foreign
		if foreign.R == nil {
			foreign.R = &keepListR{}
		}
		foreign.R.KeepListSubscribes = append(foreign.R.KeepListSubscribes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.KeepListID == foreign.KeepListID {
				local.R.KeepList = foreign
				if foreign.R == nil {
					foreign.R = &keepListR{}
				}
				foreign.R.KeepListSubscribes = append(foreign.R.KeepListSubscribes, local)
				break
			}
		}
	}

	return nil
}

// SetMember of the keepListSubscribe to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.KeepListSubscribes.
func (o *KeepListSubscribe) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `keep_list_subscribe` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, keepListSubscribePrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.KeepListSubscribeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &keepListSubscribeR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			KeepListSubscribes: KeepListSubscribeSlice{o},
		}
	} else {
		related.R.KeepListSubscribes = append(related.R.KeepListSubscribes, o)
	}

	return nil
}

// SetKeepList of the keepListSubscribe to the related item.
// Sets o.R.KeepList to related.
// Adds o to related.R.KeepListSubscribes.
func (o *KeepListSubscribe) SetKeepList(ctx context.Context, exec boil.ContextExecutor, insert bool, related *KeepList) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `keep_list_subscribe` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"keep_list_id"}),
		strmangle.WhereClause("`", "`", 0, keepListSubscribePrimaryKeyColumns),
	)
	values := []interface{}{related.KeepListID, o.KeepListSubscribeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.KeepListID = related.KeepListID
	if o.R == nil {
		o.R = &keepListSubscribeR{
			KeepList: related,
		}
	} else {
		o.R.KeepList = related
	}

	if related.R == nil {
		related.R = &keepListR{
			KeepListSubscribes: KeepListSubscribeSlice{o},
		}
	} else {
		related.R.KeepListSubscribes = append(related.R.KeepListSubscribes, o)
	}

	return nil
}

// KeepListSubscribes retrieves all the records using an executor.
func KeepListSubscribes(mods ...qm.QueryMod) keepListSubscribeQuery {
	mods = append(mods, qm.From("`keep_list_subscribe`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`keep_list_subscribe`.*"})
	}

	return keepListSubscribeQuery{q}
}

// FindKeepListSubscribe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeepListSubscribe(ctx context.Context, exec boil.ContextExecutor, keepListSubscribeID int64, selectCols ...string) (*KeepListSubscribe, error) {
	keepListSubscribeObj := &KeepListSubscribe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `keep_list_subscribe` where `keep_list_subscribe_id`=?", sel,
	)

	q := queries.Raw(query, keepListSubscribeID)

	err := q.Bind(ctx, exec, keepListSubscribeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from keep_list_subscribe")
	}

	if err = keepListSubscribeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return keepListSubscribeObj, err
	}

	return keepListSubscribeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KeepListSubscribe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no keep_list_subscribe provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepListSubscribeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	keepListSubscribeInsertCacheMut.RLock()
	cache, cached := keepListSubscribeInsertCache[key]
	keepListSubscribeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			keepListSubscribeAllColumns,
			keepListSubscribeColumnsWithDefault,
			keepListSubscribeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `keep_list_subscribe` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `keep_list_subscribe` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `keep_list_subscribe` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, keepListSubscribePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into keep_list_subscribe")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.KeepListSubscribeID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == keepListSubscribeMapping["keep_list_subscribe_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.KeepListSubscribeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for keep_list_subscribe")
	}

CacheNoHooks:
	if !cached {
		keepListSubscribeInsertCacheMut.Lock()
		keepListSubscribeInsertCache[key] = cache
		keepListSubscribeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KeepListSubscribe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KeepListSubscribe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	keepListSubscribeUpdateCacheMut.RLock()
	cache, cached := keepListSubscribeUpdateCache[key]
	keepListSubscribeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			keepListSubscribeAllColumns,
			keepListSubscribePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update keep_list_subscribe, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `keep_list_subscribe` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, keepListSubscribePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, append(wl, keepListSubscribePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update keep_list_subscribe row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for keep_list_subscribe")
	}

	if !cached {
		keepListSubscribeUpdateCacheMut.Lock()
		keepListSubscribeUpdateCache[key] = cache
		keepListSubscribeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q keepListSubscribeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for keep_list_subscribe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for keep_list_subscribe")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeepListSubscribeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepListSubscribePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `keep_list_subscribe` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepListSubscribePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in keepListSubscribe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all keepListSubscribe")
	}
	return rowsAff, nil
}

var mySQLKeepListSubscribeUniqueColumns = []string{
	"keep_list_subscribe_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KeepListSubscribe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no keep_list_subscribe provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepListSubscribeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKeepListSubscribeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keepListSubscribeUpsertCacheMut.RLock()
	cache, cached := keepListSubscribeUpsertCache[key]
	keepListSubscribeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			keepListSubscribeAllColumns,
			keepListSubscribeColumnsWithDefault,
			keepListSubscribeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			keepListSubscribeAllColumns,
			keepListSubscribePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert keep_list_subscribe, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`keep_list_subscribe`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `keep_list_subscribe` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for keep_list_subscribe")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.KeepListSubscribeID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == keepListSubscribeMapping["keep_list_subscribe_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(keepListSubscribeType, keepListSubscribeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for keep_list_subscribe")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for keep_list_subscribe")
	}

CacheNoHooks:
	if !cached {
		keepListSubscribeUpsertCacheMut.Lock()
		keepListSubscribeUpsertCache[key] = cache
		keepListSubscribeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KeepListSubscribe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KeepListSubscribe) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no KeepListSubscribe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keepListSubscribePrimaryKeyMapping)
	sql := "DELETE FROM `keep_list_subscribe` WHERE `keep_list_subscribe_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from keep_list_subscribe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for keep_list_subscribe")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q keepListSubscribeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no keepListSubscribeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from keep_list_subscribe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for keep_list_subscribe")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeepListSubscribeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(keepListSubscribeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepListSubscribePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `keep_list_subscribe` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepListSubscribePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from keepListSubscribe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for keep_list_subscribe")
	}

	if len(keepListSubscribeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KeepListSubscribe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKeepListSubscribe(ctx, exec, o.KeepListSubscribeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeepListSubscribeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KeepListSubscribeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepListSubscribePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `keep_list_subscribe`.* FROM `keep_list_subscribe` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepListSubscribePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in KeepListSubscribeSlice")
	}

	*o = slice

	return nil
}

// KeepListSubscribeExists checks if the KeepListSubscribe row exists.
func KeepListSubscribeExists(ctx context.Context, exec boil.ContextExecutor, keepListSubscribeID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `keep_list_subscribe` where `keep_list_subscribe_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, keepListSubscribeID)
	}
	row := exec.QueryRowContext(ctx, sql, keepListSubscribeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if keep_list_subscribe exists")
	}

	return exists, nil
}

// Exists checks if the KeepListSubscribe row exists.
func (o *KeepListSubscribe) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KeepListSubscribeExists(ctx, exec, o.KeepListSubscribeID)
}
