// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostCommentSong is an object representing the database table.
type PostCommentSong struct {
	PostCommentSongID int64     `boil:"post_comment_song_id" json:"post_comment_song_id" toml:"post_comment_song_id" yaml:"post_comment_song_id"`
	PostCommentID     int64     `boil:"post_comment_id" json:"post_comment_id" toml:"post_comment_id" yaml:"post_comment_id"`
	SongInfoID        int64     `boil:"song_info_id" json:"song_info_id" toml:"song_info_id" yaml:"song_info_id"`
	CreatedAt         null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt         null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt         null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *postCommentSongR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postCommentSongL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostCommentSongColumns = struct {
	PostCommentSongID string
	PostCommentID     string
	SongInfoID        string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	PostCommentSongID: "post_comment_song_id",
	PostCommentID:     "post_comment_id",
	SongInfoID:        "song_info_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var PostCommentSongTableColumns = struct {
	PostCommentSongID string
	PostCommentID     string
	SongInfoID        string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	PostCommentSongID: "post_comment_song.post_comment_song_id",
	PostCommentID:     "post_comment_song.post_comment_id",
	SongInfoID:        "post_comment_song.song_info_id",
	CreatedAt:         "post_comment_song.created_at",
	UpdatedAt:         "post_comment_song.updated_at",
	DeletedAt:         "post_comment_song.deleted_at",
}

// Generated where

var PostCommentSongWhere = struct {
	PostCommentSongID whereHelperint64
	PostCommentID     whereHelperint64
	SongInfoID        whereHelperint64
	CreatedAt         whereHelpernull_Time
	UpdatedAt         whereHelpernull_Time
	DeletedAt         whereHelpernull_Time
}{
	PostCommentSongID: whereHelperint64{field: "`post_comment_song`.`post_comment_song_id`"},
	PostCommentID:     whereHelperint64{field: "`post_comment_song`.`post_comment_id`"},
	SongInfoID:        whereHelperint64{field: "`post_comment_song`.`song_info_id`"},
	CreatedAt:         whereHelpernull_Time{field: "`post_comment_song`.`created_at`"},
	UpdatedAt:         whereHelpernull_Time{field: "`post_comment_song`.`updated_at`"},
	DeletedAt:         whereHelpernull_Time{field: "`post_comment_song`.`deleted_at`"},
}

// PostCommentSongRels is where relationship names are stored.
var PostCommentSongRels = struct {
	PostComment string
}{
	PostComment: "PostComment",
}

// postCommentSongR is where relationships are stored.
type postCommentSongR struct {
	PostComment *PostComment `boil:"PostComment" json:"PostComment" toml:"PostComment" yaml:"PostComment"`
}

// NewStruct creates a new relationship struct
func (*postCommentSongR) NewStruct() *postCommentSongR {
	return &postCommentSongR{}
}

func (r *postCommentSongR) GetPostComment() *PostComment {
	if r == nil {
		return nil
	}
	return r.PostComment
}

// postCommentSongL is where Load methods for each relationship are stored.
type postCommentSongL struct{}

var (
	postCommentSongAllColumns            = []string{"post_comment_song_id", "post_comment_id", "song_info_id", "created_at", "updated_at", "deleted_at"}
	postCommentSongColumnsWithoutDefault = []string{"post_comment_id", "song_info_id", "deleted_at"}
	postCommentSongColumnsWithDefault    = []string{"post_comment_song_id", "created_at", "updated_at"}
	postCommentSongPrimaryKeyColumns     = []string{"post_comment_song_id"}
	postCommentSongGeneratedColumns      = []string{}
)

type (
	// PostCommentSongSlice is an alias for a slice of pointers to PostCommentSong.
	// This should almost always be used instead of []PostCommentSong.
	PostCommentSongSlice []*PostCommentSong
	// PostCommentSongHook is the signature for custom PostCommentSong hook methods
	PostCommentSongHook func(context.Context, boil.ContextExecutor, *PostCommentSong) error

	postCommentSongQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postCommentSongType                 = reflect.TypeOf(&PostCommentSong{})
	postCommentSongMapping              = queries.MakeStructMapping(postCommentSongType)
	postCommentSongPrimaryKeyMapping, _ = queries.BindMapping(postCommentSongType, postCommentSongMapping, postCommentSongPrimaryKeyColumns)
	postCommentSongInsertCacheMut       sync.RWMutex
	postCommentSongInsertCache          = make(map[string]insertCache)
	postCommentSongUpdateCacheMut       sync.RWMutex
	postCommentSongUpdateCache          = make(map[string]updateCache)
	postCommentSongUpsertCacheMut       sync.RWMutex
	postCommentSongUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postCommentSongAfterSelectHooks []PostCommentSongHook

var postCommentSongBeforeInsertHooks []PostCommentSongHook
var postCommentSongAfterInsertHooks []PostCommentSongHook

var postCommentSongBeforeUpdateHooks []PostCommentSongHook
var postCommentSongAfterUpdateHooks []PostCommentSongHook

var postCommentSongBeforeDeleteHooks []PostCommentSongHook
var postCommentSongAfterDeleteHooks []PostCommentSongHook

var postCommentSongBeforeUpsertHooks []PostCommentSongHook
var postCommentSongAfterUpsertHooks []PostCommentSongHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostCommentSong) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostCommentSong) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostCommentSong) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostCommentSong) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostCommentSong) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostCommentSong) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostCommentSong) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostCommentSong) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostCommentSong) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentSongAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostCommentSongHook registers your hook function for all future operations.
func AddPostCommentSongHook(hookPoint boil.HookPoint, postCommentSongHook PostCommentSongHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postCommentSongAfterSelectHooks = append(postCommentSongAfterSelectHooks, postCommentSongHook)
	case boil.BeforeInsertHook:
		postCommentSongBeforeInsertHooks = append(postCommentSongBeforeInsertHooks, postCommentSongHook)
	case boil.AfterInsertHook:
		postCommentSongAfterInsertHooks = append(postCommentSongAfterInsertHooks, postCommentSongHook)
	case boil.BeforeUpdateHook:
		postCommentSongBeforeUpdateHooks = append(postCommentSongBeforeUpdateHooks, postCommentSongHook)
	case boil.AfterUpdateHook:
		postCommentSongAfterUpdateHooks = append(postCommentSongAfterUpdateHooks, postCommentSongHook)
	case boil.BeforeDeleteHook:
		postCommentSongBeforeDeleteHooks = append(postCommentSongBeforeDeleteHooks, postCommentSongHook)
	case boil.AfterDeleteHook:
		postCommentSongAfterDeleteHooks = append(postCommentSongAfterDeleteHooks, postCommentSongHook)
	case boil.BeforeUpsertHook:
		postCommentSongBeforeUpsertHooks = append(postCommentSongBeforeUpsertHooks, postCommentSongHook)
	case boil.AfterUpsertHook:
		postCommentSongAfterUpsertHooks = append(postCommentSongAfterUpsertHooks, postCommentSongHook)
	}
}

// One returns a single postCommentSong record from the query.
func (q postCommentSongQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostCommentSong, error) {
	o := &PostCommentSong{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for post_comment_song")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostCommentSong records from the query.
func (q postCommentSongQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostCommentSongSlice, error) {
	var o []*PostCommentSong

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to PostCommentSong slice")
	}

	if len(postCommentSongAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostCommentSong records in the query.
func (q postCommentSongQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count post_comment_song rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postCommentSongQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if post_comment_song exists")
	}

	return count > 0, nil
}

// PostComment pointed to by the foreign key.
func (o *PostCommentSong) PostComment(mods ...qm.QueryMod) postCommentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`post_comment_id` = ?", o.PostCommentID),
	}

	queryMods = append(queryMods, mods...)

	return PostComments(queryMods...)
}

// LoadPostComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postCommentSongL) LoadPostComment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostCommentSong interface{}, mods queries.Applicator) error {
	var slice []*PostCommentSong
	var object *PostCommentSong

	if singular {
		var ok bool
		object, ok = maybePostCommentSong.(*PostCommentSong)
		if !ok {
			object = new(PostCommentSong)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostCommentSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostCommentSong))
			}
		}
	} else {
		s, ok := maybePostCommentSong.(*[]*PostCommentSong)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostCommentSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostCommentSong))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postCommentSongR{}
		}
		args = append(args, object.PostCommentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCommentSongR{}
			}

			for _, a := range args {
				if a == obj.PostCommentID {
					continue Outer
				}
			}

			args = append(args, obj.PostCommentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`post_comment`),
		qm.WhereIn(`post_comment.post_comment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PostComment")
	}

	var resultSlice []*PostComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PostComment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post_comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_comment")
	}

	if len(postCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PostComment = foreign
		if foreign.R == nil {
			foreign.R = &postCommentR{}
		}
		foreign.R.PostCommentSongs = append(foreign.R.PostCommentSongs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostCommentID == foreign.PostCommentID {
				local.R.PostComment = foreign
				if foreign.R == nil {
					foreign.R = &postCommentR{}
				}
				foreign.R.PostCommentSongs = append(foreign.R.PostCommentSongs, local)
				break
			}
		}
	}

	return nil
}

// SetPostComment of the postCommentSong to the related item.
// Sets o.R.PostComment to related.
// Adds o to related.R.PostCommentSongs.
func (o *PostCommentSong) SetPostComment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PostComment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `post_comment_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"post_comment_id"}),
		strmangle.WhereClause("`", "`", 0, postCommentSongPrimaryKeyColumns),
	)
	values := []interface{}{related.PostCommentID, o.PostCommentSongID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostCommentID = related.PostCommentID
	if o.R == nil {
		o.R = &postCommentSongR{
			PostComment: related,
		}
	} else {
		o.R.PostComment = related
	}

	if related.R == nil {
		related.R = &postCommentR{
			PostCommentSongs: PostCommentSongSlice{o},
		}
	} else {
		related.R.PostCommentSongs = append(related.R.PostCommentSongs, o)
	}

	return nil
}

// PostCommentSongs retrieves all the records using an executor.
func PostCommentSongs(mods ...qm.QueryMod) postCommentSongQuery {
	mods = append(mods, qm.From("`post_comment_song`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`post_comment_song`.*"})
	}

	return postCommentSongQuery{q}
}

// FindPostCommentSong retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostCommentSong(ctx context.Context, exec boil.ContextExecutor, postCommentSongID int64, selectCols ...string) (*PostCommentSong, error) {
	postCommentSongObj := &PostCommentSong{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `post_comment_song` where `post_comment_song_id`=?", sel,
	)

	q := queries.Raw(query, postCommentSongID)

	err := q.Bind(ctx, exec, postCommentSongObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from post_comment_song")
	}

	if err = postCommentSongObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postCommentSongObj, err
	}

	return postCommentSongObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostCommentSong) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_comment_song provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentSongColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postCommentSongInsertCacheMut.RLock()
	cache, cached := postCommentSongInsertCache[key]
	postCommentSongInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postCommentSongAllColumns,
			postCommentSongColumnsWithDefault,
			postCommentSongColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postCommentSongType, postCommentSongMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postCommentSongType, postCommentSongMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `post_comment_song` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `post_comment_song` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `post_comment_song` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, postCommentSongPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into post_comment_song")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostCommentSongID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postCommentSongMapping["post_comment_song_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PostCommentSongID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_comment_song")
	}

CacheNoHooks:
	if !cached {
		postCommentSongInsertCacheMut.Lock()
		postCommentSongInsertCache[key] = cache
		postCommentSongInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostCommentSong.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostCommentSong) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postCommentSongUpdateCacheMut.RLock()
	cache, cached := postCommentSongUpdateCache[key]
	postCommentSongUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postCommentSongAllColumns,
			postCommentSongPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update post_comment_song, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `post_comment_song` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, postCommentSongPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postCommentSongType, postCommentSongMapping, append(wl, postCommentSongPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update post_comment_song row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for post_comment_song")
	}

	if !cached {
		postCommentSongUpdateCacheMut.Lock()
		postCommentSongUpdateCache[key] = cache
		postCommentSongUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postCommentSongQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for post_comment_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for post_comment_song")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostCommentSongSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `post_comment_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentSongPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in postCommentSong slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all postCommentSong")
	}
	return rowsAff, nil
}

var mySQLPostCommentSongUniqueColumns = []string{
	"post_comment_song_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostCommentSong) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_comment_song provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentSongColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPostCommentSongUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postCommentSongUpsertCacheMut.RLock()
	cache, cached := postCommentSongUpsertCache[key]
	postCommentSongUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postCommentSongAllColumns,
			postCommentSongColumnsWithDefault,
			postCommentSongColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postCommentSongAllColumns,
			postCommentSongPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert post_comment_song, could not build update column list")
		}

		ret := strmangle.SetComplement(postCommentSongAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`post_comment_song`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `post_comment_song` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(postCommentSongType, postCommentSongMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postCommentSongType, postCommentSongMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for post_comment_song")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostCommentSongID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postCommentSongMapping["post_comment_song_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(postCommentSongType, postCommentSongMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for post_comment_song")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_comment_song")
	}

CacheNoHooks:
	if !cached {
		postCommentSongUpsertCacheMut.Lock()
		postCommentSongUpsertCache[key] = cache
		postCommentSongUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostCommentSong record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostCommentSong) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no PostCommentSong provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postCommentSongPrimaryKeyMapping)
	sql := "DELETE FROM `post_comment_song` WHERE `post_comment_song_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from post_comment_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for post_comment_song")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postCommentSongQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no postCommentSongQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from post_comment_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_comment_song")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostCommentSongSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postCommentSongBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `post_comment_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentSongPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from postCommentSong slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_comment_song")
	}

	if len(postCommentSongAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostCommentSong) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostCommentSong(ctx, exec, o.PostCommentSongID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostCommentSongSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostCommentSongSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `post_comment_song`.* FROM `post_comment_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentSongPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in PostCommentSongSlice")
	}

	*o = slice

	return nil
}

// PostCommentSongExists checks if the PostCommentSong row exists.
func PostCommentSongExists(ctx context.Context, exec boil.ContextExecutor, postCommentSongID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `post_comment_song` where `post_comment_song_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, postCommentSongID)
	}
	row := exec.QueryRowContext(ctx, sql, postCommentSongID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if post_comment_song exists")
	}

	return exists, nil
}

// Exists checks if the PostCommentSong row exists.
func (o *PostCommentSong) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostCommentSongExists(ctx, exec, o.PostCommentSongID)
}
