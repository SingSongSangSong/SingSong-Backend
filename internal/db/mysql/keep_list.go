// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KeepList is an object representing the database table.
type KeepList struct {
	KeepListID int64       `boil:"keep_list_id" json:"keep_list_id" toml:"keep_list_id" yaml:"keep_list_id"`
	MemberID   int64       `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	KeepName   null.String `boil:"keep_name" json:"keep_name,omitempty" toml:"keep_name" yaml:"keep_name,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *keepListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keepListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeepListColumns = struct {
	KeepListID string
	MemberID   string
	KeepName   string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	KeepListID: "keep_list_id",
	MemberID:   "member_id",
	KeepName:   "keep_name",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var KeepListTableColumns = struct {
	KeepListID string
	MemberID   string
	KeepName   string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	KeepListID: "keep_list.keep_list_id",
	MemberID:   "keep_list.member_id",
	KeepName:   "keep_list.keep_name",
	CreatedAt:  "keep_list.created_at",
	UpdatedAt:  "keep_list.updated_at",
	DeletedAt:  "keep_list.deleted_at",
}

// Generated where

var KeepListWhere = struct {
	KeepListID whereHelperint64
	MemberID   whereHelperint64
	KeepName   whereHelpernull_String
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
}{
	KeepListID: whereHelperint64{field: "`keep_list`.`keep_list_id`"},
	MemberID:   whereHelperint64{field: "`keep_list`.`member_id`"},
	KeepName:   whereHelpernull_String{field: "`keep_list`.`keep_name`"},
	CreatedAt:  whereHelpernull_Time{field: "`keep_list`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`keep_list`.`updated_at`"},
	DeletedAt:  whereHelpernull_Time{field: "`keep_list`.`deleted_at`"},
}

// KeepListRels is where relationship names are stored.
var KeepListRels = struct {
}{}

// keepListR is where relationships are stored.
type keepListR struct {
}

// NewStruct creates a new relationship struct
func (*keepListR) NewStruct() *keepListR {
	return &keepListR{}
}

// keepListL is where Load methods for each relationship are stored.
type keepListL struct{}

var (
	keepListAllColumns            = []string{"keep_list_id", "member_id", "keep_name", "created_at", "updated_at", "deleted_at"}
	keepListColumnsWithoutDefault = []string{"member_id", "keep_name", "deleted_at"}
	keepListColumnsWithDefault    = []string{"keep_list_id", "created_at", "updated_at"}
	keepListPrimaryKeyColumns     = []string{"keep_list_id"}
	keepListGeneratedColumns      = []string{}
)

type (
	// KeepListSlice is an alias for a slice of pointers to KeepList.
	// This should almost always be used instead of []KeepList.
	KeepListSlice []*KeepList
	// KeepListHook is the signature for custom KeepList hook methods
	KeepListHook func(context.Context, boil.ContextExecutor, *KeepList) error

	keepListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keepListType                 = reflect.TypeOf(&KeepList{})
	keepListMapping              = queries.MakeStructMapping(keepListType)
	keepListPrimaryKeyMapping, _ = queries.BindMapping(keepListType, keepListMapping, keepListPrimaryKeyColumns)
	keepListInsertCacheMut       sync.RWMutex
	keepListInsertCache          = make(map[string]insertCache)
	keepListUpdateCacheMut       sync.RWMutex
	keepListUpdateCache          = make(map[string]updateCache)
	keepListUpsertCacheMut       sync.RWMutex
	keepListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var keepListAfterSelectMu sync.Mutex
var keepListAfterSelectHooks []KeepListHook

var keepListBeforeInsertMu sync.Mutex
var keepListBeforeInsertHooks []KeepListHook
var keepListAfterInsertMu sync.Mutex
var keepListAfterInsertHooks []KeepListHook

var keepListBeforeUpdateMu sync.Mutex
var keepListBeforeUpdateHooks []KeepListHook
var keepListAfterUpdateMu sync.Mutex
var keepListAfterUpdateHooks []KeepListHook

var keepListBeforeDeleteMu sync.Mutex
var keepListBeforeDeleteHooks []KeepListHook
var keepListAfterDeleteMu sync.Mutex
var keepListAfterDeleteHooks []KeepListHook

var keepListBeforeUpsertMu sync.Mutex
var keepListBeforeUpsertHooks []KeepListHook
var keepListAfterUpsertMu sync.Mutex
var keepListAfterUpsertHooks []KeepListHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KeepList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KeepList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KeepList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KeepList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KeepList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KeepList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KeepList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KeepList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KeepList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKeepListHook registers your hook function for all future operations.
func AddKeepListHook(hookPoint boil.HookPoint, keepListHook KeepListHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		keepListAfterSelectMu.Lock()
		keepListAfterSelectHooks = append(keepListAfterSelectHooks, keepListHook)
		keepListAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		keepListBeforeInsertMu.Lock()
		keepListBeforeInsertHooks = append(keepListBeforeInsertHooks, keepListHook)
		keepListBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		keepListAfterInsertMu.Lock()
		keepListAfterInsertHooks = append(keepListAfterInsertHooks, keepListHook)
		keepListAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		keepListBeforeUpdateMu.Lock()
		keepListBeforeUpdateHooks = append(keepListBeforeUpdateHooks, keepListHook)
		keepListBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		keepListAfterUpdateMu.Lock()
		keepListAfterUpdateHooks = append(keepListAfterUpdateHooks, keepListHook)
		keepListAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		keepListBeforeDeleteMu.Lock()
		keepListBeforeDeleteHooks = append(keepListBeforeDeleteHooks, keepListHook)
		keepListBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		keepListAfterDeleteMu.Lock()
		keepListAfterDeleteHooks = append(keepListAfterDeleteHooks, keepListHook)
		keepListAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		keepListBeforeUpsertMu.Lock()
		keepListBeforeUpsertHooks = append(keepListBeforeUpsertHooks, keepListHook)
		keepListBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		keepListAfterUpsertMu.Lock()
		keepListAfterUpsertHooks = append(keepListAfterUpsertHooks, keepListHook)
		keepListAfterUpsertMu.Unlock()
	}
}

// One returns a single keepList record from the query.
func (q keepListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KeepList, error) {
	o := &KeepList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for keep_list")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KeepList records from the query.
func (q keepListQuery) All(ctx context.Context, exec boil.ContextExecutor) (KeepListSlice, error) {
	var o []*KeepList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to KeepList slice")
	}

	if len(keepListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KeepList records in the query.
func (q keepListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count keep_list rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q keepListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if keep_list exists")
	}

	return count > 0, nil
}

// KeepLists retrieves all the records using an executor.
func KeepLists(mods ...qm.QueryMod) keepListQuery {
	mods = append(mods, qm.From("`keep_list`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`keep_list`.*"})
	}

	return keepListQuery{q}
}

// FindKeepList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeepList(ctx context.Context, exec boil.ContextExecutor, keepListID int64, selectCols ...string) (*KeepList, error) {
	keepListObj := &KeepList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `keep_list` where `keep_list_id`=?", sel,
	)

	q := queries.Raw(query, keepListID)

	err := q.Bind(ctx, exec, keepListObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from keep_list")
	}

	if err = keepListObj.doAfterSelectHooks(ctx, exec); err != nil {
		return keepListObj, err
	}

	return keepListObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KeepList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no keep_list provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	keepListInsertCacheMut.RLock()
	cache, cached := keepListInsertCache[key]
	keepListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			keepListAllColumns,
			keepListColumnsWithDefault,
			keepListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(keepListType, keepListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keepListType, keepListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `keep_list` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `keep_list` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `keep_list` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, keepListPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into keep_list")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.KeepListID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == keepListMapping["keep_list_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.KeepListID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for keep_list")
	}

CacheNoHooks:
	if !cached {
		keepListInsertCacheMut.Lock()
		keepListInsertCache[key] = cache
		keepListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KeepList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KeepList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	keepListUpdateCacheMut.RLock()
	cache, cached := keepListUpdateCache[key]
	keepListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			keepListAllColumns,
			keepListPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update keep_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `keep_list` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, keepListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keepListType, keepListMapping, append(wl, keepListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update keep_list row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for keep_list")
	}

	if !cached {
		keepListUpdateCacheMut.Lock()
		keepListUpdateCache[key] = cache
		keepListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q keepListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for keep_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for keep_list")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeepListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `keep_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepListPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in keepList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all keepList")
	}
	return rowsAff, nil
}

var mySQLKeepListUniqueColumns = []string{
	"keep_list_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KeepList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no keep_list provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepListColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKeepListUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keepListUpsertCacheMut.RLock()
	cache, cached := keepListUpsertCache[key]
	keepListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			keepListAllColumns,
			keepListColumnsWithDefault,
			keepListColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			keepListAllColumns,
			keepListPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert keep_list, could not build update column list")
		}

		ret := strmangle.SetComplement(keepListAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`keep_list`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `keep_list` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(keepListType, keepListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keepListType, keepListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for keep_list")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.KeepListID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == keepListMapping["keep_list_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(keepListType, keepListMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for keep_list")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for keep_list")
	}

CacheNoHooks:
	if !cached {
		keepListUpsertCacheMut.Lock()
		keepListUpsertCache[key] = cache
		keepListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KeepList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KeepList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no KeepList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keepListPrimaryKeyMapping)
	sql := "DELETE FROM `keep_list` WHERE `keep_list_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from keep_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for keep_list")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q keepListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no keepListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from keep_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for keep_list")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeepListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(keepListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `keep_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepListPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from keepList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for keep_list")
	}

	if len(keepListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KeepList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKeepList(ctx, exec, o.KeepListID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeepListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KeepListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `keep_list`.* FROM `keep_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, keepListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in KeepListSlice")
	}

	*o = slice

	return nil
}

// KeepListExists checks if the KeepList row exists.
func KeepListExists(ctx context.Context, exec boil.ContextExecutor, keepListID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `keep_list` where `keep_list_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, keepListID)
	}
	row := exec.QueryRowContext(ctx, sql, keepListID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if keep_list exists")
	}

	return exists, nil
}

// Exists checks if the KeepList row exists.
func (o *KeepList) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KeepListExists(ctx, exec, o.KeepListID)
}
