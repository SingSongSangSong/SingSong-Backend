// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostSong is an object representing the database table.
type PostSong struct {
	PostSongID int64     `boil:"post_song_id" json:"post_song_id" toml:"post_song_id" yaml:"post_song_id"`
	PostID     int64     `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	SongInfoID int64     `boil:"song_info_id" json:"song_info_id" toml:"song_info_id" yaml:"song_info_id"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt  null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *postSongR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postSongL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostSongColumns = struct {
	PostSongID string
	PostID     string
	SongInfoID string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	PostSongID: "post_song_id",
	PostID:     "post_id",
	SongInfoID: "song_info_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var PostSongTableColumns = struct {
	PostSongID string
	PostID     string
	SongInfoID string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	PostSongID: "post_song.post_song_id",
	PostID:     "post_song.post_id",
	SongInfoID: "post_song.song_info_id",
	CreatedAt:  "post_song.created_at",
	UpdatedAt:  "post_song.updated_at",
	DeletedAt:  "post_song.deleted_at",
}

// Generated where

var PostSongWhere = struct {
	PostSongID whereHelperint64
	PostID     whereHelperint64
	SongInfoID whereHelperint64
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
}{
	PostSongID: whereHelperint64{field: "`post_song`.`post_song_id`"},
	PostID:     whereHelperint64{field: "`post_song`.`post_id`"},
	SongInfoID: whereHelperint64{field: "`post_song`.`song_info_id`"},
	CreatedAt:  whereHelpernull_Time{field: "`post_song`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`post_song`.`updated_at`"},
	DeletedAt:  whereHelpernull_Time{field: "`post_song`.`deleted_at`"},
}

// PostSongRels is where relationship names are stored.
var PostSongRels = struct {
	Post string
}{
	Post: "Post",
}

// postSongR is where relationships are stored.
type postSongR struct {
	Post *Post `boil:"Post" json:"Post" toml:"Post" yaml:"Post"`
}

// NewStruct creates a new relationship struct
func (*postSongR) NewStruct() *postSongR {
	return &postSongR{}
}

func (r *postSongR) GetPost() *Post {
	if r == nil {
		return nil
	}
	return r.Post
}

// postSongL is where Load methods for each relationship are stored.
type postSongL struct{}

var (
	postSongAllColumns            = []string{"post_song_id", "post_id", "song_info_id", "created_at", "updated_at", "deleted_at"}
	postSongColumnsWithoutDefault = []string{"post_id", "song_info_id", "deleted_at"}
	postSongColumnsWithDefault    = []string{"post_song_id", "created_at", "updated_at"}
	postSongPrimaryKeyColumns     = []string{"post_song_id"}
	postSongGeneratedColumns      = []string{}
)

type (
	// PostSongSlice is an alias for a slice of pointers to PostSong.
	// This should almost always be used instead of []PostSong.
	PostSongSlice []*PostSong
	// PostSongHook is the signature for custom PostSong hook methods
	PostSongHook func(context.Context, boil.ContextExecutor, *PostSong) error

	postSongQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postSongType                 = reflect.TypeOf(&PostSong{})
	postSongMapping              = queries.MakeStructMapping(postSongType)
	postSongPrimaryKeyMapping, _ = queries.BindMapping(postSongType, postSongMapping, postSongPrimaryKeyColumns)
	postSongInsertCacheMut       sync.RWMutex
	postSongInsertCache          = make(map[string]insertCache)
	postSongUpdateCacheMut       sync.RWMutex
	postSongUpdateCache          = make(map[string]updateCache)
	postSongUpsertCacheMut       sync.RWMutex
	postSongUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postSongAfterSelectHooks []PostSongHook

var postSongBeforeInsertHooks []PostSongHook
var postSongAfterInsertHooks []PostSongHook

var postSongBeforeUpdateHooks []PostSongHook
var postSongAfterUpdateHooks []PostSongHook

var postSongBeforeDeleteHooks []PostSongHook
var postSongAfterDeleteHooks []PostSongHook

var postSongBeforeUpsertHooks []PostSongHook
var postSongAfterUpsertHooks []PostSongHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostSong) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostSong) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostSong) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostSong) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostSong) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostSong) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostSong) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostSong) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostSong) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postSongAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostSongHook registers your hook function for all future operations.
func AddPostSongHook(hookPoint boil.HookPoint, postSongHook PostSongHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postSongAfterSelectHooks = append(postSongAfterSelectHooks, postSongHook)
	case boil.BeforeInsertHook:
		postSongBeforeInsertHooks = append(postSongBeforeInsertHooks, postSongHook)
	case boil.AfterInsertHook:
		postSongAfterInsertHooks = append(postSongAfterInsertHooks, postSongHook)
	case boil.BeforeUpdateHook:
		postSongBeforeUpdateHooks = append(postSongBeforeUpdateHooks, postSongHook)
	case boil.AfterUpdateHook:
		postSongAfterUpdateHooks = append(postSongAfterUpdateHooks, postSongHook)
	case boil.BeforeDeleteHook:
		postSongBeforeDeleteHooks = append(postSongBeforeDeleteHooks, postSongHook)
	case boil.AfterDeleteHook:
		postSongAfterDeleteHooks = append(postSongAfterDeleteHooks, postSongHook)
	case boil.BeforeUpsertHook:
		postSongBeforeUpsertHooks = append(postSongBeforeUpsertHooks, postSongHook)
	case boil.AfterUpsertHook:
		postSongAfterUpsertHooks = append(postSongAfterUpsertHooks, postSongHook)
	}
}

// One returns a single postSong record from the query.
func (q postSongQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostSong, error) {
	o := &PostSong{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for post_song")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostSong records from the query.
func (q postSongQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostSongSlice, error) {
	var o []*PostSong

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to PostSong slice")
	}

	if len(postSongAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostSong records in the query.
func (q postSongQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count post_song rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postSongQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if post_song exists")
	}

	return count > 0, nil
}

// Post pointed to by the foreign key.
func (o *PostSong) Post(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`post_id` = ?", o.PostID),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// LoadPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postSongL) LoadPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostSong interface{}, mods queries.Applicator) error {
	var slice []*PostSong
	var object *PostSong

	if singular {
		var ok bool
		object, ok = maybePostSong.(*PostSong)
		if !ok {
			object = new(PostSong)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostSong))
			}
		}
	} else {
		s, ok := maybePostSong.(*[]*PostSong)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostSong))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postSongR{}
		}
		args = append(args, object.PostID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postSongR{}
			}

			for _, a := range args {
				if a == obj.PostID {
					continue Outer
				}
			}

			args = append(args, obj.PostID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.post_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Post = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.PostSongs = append(foreign.R.PostSongs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostID == foreign.PostID {
				local.R.Post = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.PostSongs = append(foreign.R.PostSongs, local)
				break
			}
		}
	}

	return nil
}

// SetPost of the postSong to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.PostSongs.
func (o *PostSong) SetPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `post_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"post_id"}),
		strmangle.WhereClause("`", "`", 0, postSongPrimaryKeyColumns),
	)
	values := []interface{}{related.PostID, o.PostSongID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostID = related.PostID
	if o.R == nil {
		o.R = &postSongR{
			Post: related,
		}
	} else {
		o.R.Post = related
	}

	if related.R == nil {
		related.R = &postR{
			PostSongs: PostSongSlice{o},
		}
	} else {
		related.R.PostSongs = append(related.R.PostSongs, o)
	}

	return nil
}

// PostSongs retrieves all the records using an executor.
func PostSongs(mods ...qm.QueryMod) postSongQuery {
	mods = append(mods, qm.From("`post_song`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`post_song`.*"})
	}

	return postSongQuery{q}
}

// FindPostSong retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostSong(ctx context.Context, exec boil.ContextExecutor, postSongID int64, selectCols ...string) (*PostSong, error) {
	postSongObj := &PostSong{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `post_song` where `post_song_id`=?", sel,
	)

	q := queries.Raw(query, postSongID)

	err := q.Bind(ctx, exec, postSongObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from post_song")
	}

	if err = postSongObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postSongObj, err
	}

	return postSongObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostSong) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_song provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postSongColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postSongInsertCacheMut.RLock()
	cache, cached := postSongInsertCache[key]
	postSongInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postSongAllColumns,
			postSongColumnsWithDefault,
			postSongColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postSongType, postSongMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postSongType, postSongMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `post_song` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `post_song` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `post_song` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, postSongPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into post_song")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostSongID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postSongMapping["post_song_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PostSongID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_song")
	}

CacheNoHooks:
	if !cached {
		postSongInsertCacheMut.Lock()
		postSongInsertCache[key] = cache
		postSongInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostSong.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostSong) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postSongUpdateCacheMut.RLock()
	cache, cached := postSongUpdateCache[key]
	postSongUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postSongAllColumns,
			postSongPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update post_song, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `post_song` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, postSongPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postSongType, postSongMapping, append(wl, postSongPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update post_song row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for post_song")
	}

	if !cached {
		postSongUpdateCacheMut.Lock()
		postSongUpdateCache[key] = cache
		postSongUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postSongQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for post_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for post_song")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostSongSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `post_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postSongPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in postSong slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all postSong")
	}
	return rowsAff, nil
}

var mySQLPostSongUniqueColumns = []string{
	"post_song_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostSong) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_song provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postSongColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPostSongUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postSongUpsertCacheMut.RLock()
	cache, cached := postSongUpsertCache[key]
	postSongUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postSongAllColumns,
			postSongColumnsWithDefault,
			postSongColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postSongAllColumns,
			postSongPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert post_song, could not build update column list")
		}

		ret := strmangle.SetComplement(postSongAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`post_song`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `post_song` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(postSongType, postSongMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postSongType, postSongMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for post_song")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostSongID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postSongMapping["post_song_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(postSongType, postSongMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for post_song")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_song")
	}

CacheNoHooks:
	if !cached {
		postSongUpsertCacheMut.Lock()
		postSongUpsertCache[key] = cache
		postSongUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostSong record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostSong) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no PostSong provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postSongPrimaryKeyMapping)
	sql := "DELETE FROM `post_song` WHERE `post_song_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from post_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for post_song")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postSongQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no postSongQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from post_song")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_song")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostSongSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postSongBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `post_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postSongPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from postSong slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_song")
	}

	if len(postSongAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostSong) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostSong(ctx, exec, o.PostSongID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostSongSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostSongSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `post_song`.* FROM `post_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postSongPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in PostSongSlice")
	}

	*o = slice

	return nil
}

// PostSongExists checks if the PostSong row exists.
func PostSongExists(ctx context.Context, exec boil.ContextExecutor, postSongID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `post_song` where `post_song_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, postSongID)
	}
	row := exec.QueryRowContext(ctx, sql, postSongID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if post_song exists")
	}

	return exists, nil
}

// Exists checks if the PostSong row exists.
func (o *PostSong) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostSongExists(ctx, exec, o.PostSongID)
}
