// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ArtistInfo is an object representing the database table.
type ArtistInfo struct {
	ArtistId       int64       `boil:"artistId" json:"artistId" toml:"artistId" yaml:"artistId"`
	ArtistName     string      `boil:"artistName" json:"artistName" toml:"artistName" yaml:"artistName"`
	ArtistType     null.String `boil:"artistType" json:"artistType,omitempty" toml:"artistType" yaml:"artistType,omitempty"`
	RelatedArtists null.String `boil:"relatedArtists" json:"relatedArtists,omitempty" toml:"relatedArtists" yaml:"relatedArtists,omitempty"`
	Country        null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	CreatedAt      null.Time   `boil:"createdAt" json:"createdAt,omitempty" toml:"createdAt" yaml:"createdAt,omitempty"`
	UpdatedAt      null.Time   `boil:"updatedAt" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt      null.Time   `boil:"deletedAt" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *artistInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artistInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtistInfoColumns = struct {
	ArtistId       string
	ArtistName     string
	ArtistType     string
	RelatedArtists string
	Country        string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ArtistId:       "artistId",
	ArtistName:     "artistName",
	ArtistType:     "artistType",
	RelatedArtists: "relatedArtists",
	Country:        "country",
	CreatedAt:      "createdAt",
	UpdatedAt:      "updatedAt",
	DeletedAt:      "deletedAt",
}

var ArtistInfoTableColumns = struct {
	ArtistId       string
	ArtistName     string
	ArtistType     string
	RelatedArtists string
	Country        string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ArtistId:       "artistInfo.artistId",
	ArtistName:     "artistInfo.artistName",
	ArtistType:     "artistInfo.artistType",
	RelatedArtists: "artistInfo.relatedArtists",
	Country:        "artistInfo.country",
	CreatedAt:      "artistInfo.createdAt",
	UpdatedAt:      "artistInfo.updatedAt",
	DeletedAt:      "artistInfo.deletedAt",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ArtistInfoWhere = struct {
	ArtistId       whereHelperint64
	ArtistName     whereHelperstring
	ArtistType     whereHelpernull_String
	RelatedArtists whereHelpernull_String
	Country        whereHelpernull_String
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
}{
	ArtistId:       whereHelperint64{field: "`artistInfo`.`artistId`"},
	ArtistName:     whereHelperstring{field: "`artistInfo`.`artistName`"},
	ArtistType:     whereHelpernull_String{field: "`artistInfo`.`artistType`"},
	RelatedArtists: whereHelpernull_String{field: "`artistInfo`.`relatedArtists`"},
	Country:        whereHelpernull_String{field: "`artistInfo`.`country`"},
	CreatedAt:      whereHelpernull_Time{field: "`artistInfo`.`createdAt`"},
	UpdatedAt:      whereHelpernull_Time{field: "`artistInfo`.`updatedAt`"},
	DeletedAt:      whereHelpernull_Time{field: "`artistInfo`.`deletedAt`"},
}

// ArtistInfoRels is where relationship names are stored.
var ArtistInfoRels = struct {
}{}

// artistInfoR is where relationships are stored.
type artistInfoR struct {
}

// NewStruct creates a new relationship struct
func (*artistInfoR) NewStruct() *artistInfoR {
	return &artistInfoR{}
}

// artistInfoL is where Load methods for each relationship are stored.
type artistInfoL struct{}

var (
	artistInfoAllColumns            = []string{"artistId", "artistName", "artistType", "relatedArtists", "country", "createdAt", "updatedAt", "deletedAt"}
	artistInfoColumnsWithoutDefault = []string{"artistName", "artistType", "relatedArtists", "country", "deletedAt"}
	artistInfoColumnsWithDefault    = []string{"artistId", "createdAt", "updatedAt"}
	artistInfoPrimaryKeyColumns     = []string{"artistId"}
	artistInfoGeneratedColumns      = []string{}
)

type (
	// ArtistInfoSlice is an alias for a slice of pointers to ArtistInfo.
	// This should almost always be used instead of []ArtistInfo.
	ArtistInfoSlice []*ArtistInfo
	// ArtistInfoHook is the signature for custom ArtistInfo hook methods
	ArtistInfoHook func(context.Context, boil.ContextExecutor, *ArtistInfo) error

	artistInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artistInfoType                 = reflect.TypeOf(&ArtistInfo{})
	artistInfoMapping              = queries.MakeStructMapping(artistInfoType)
	artistInfoPrimaryKeyMapping, _ = queries.BindMapping(artistInfoType, artistInfoMapping, artistInfoPrimaryKeyColumns)
	artistInfoInsertCacheMut       sync.RWMutex
	artistInfoInsertCache          = make(map[string]insertCache)
	artistInfoUpdateCacheMut       sync.RWMutex
	artistInfoUpdateCache          = make(map[string]updateCache)
	artistInfoUpsertCacheMut       sync.RWMutex
	artistInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artistInfoAfterSelectMu sync.Mutex
var artistInfoAfterSelectHooks []ArtistInfoHook

var artistInfoBeforeInsertMu sync.Mutex
var artistInfoBeforeInsertHooks []ArtistInfoHook
var artistInfoAfterInsertMu sync.Mutex
var artistInfoAfterInsertHooks []ArtistInfoHook

var artistInfoBeforeUpdateMu sync.Mutex
var artistInfoBeforeUpdateHooks []ArtistInfoHook
var artistInfoAfterUpdateMu sync.Mutex
var artistInfoAfterUpdateHooks []ArtistInfoHook

var artistInfoBeforeDeleteMu sync.Mutex
var artistInfoBeforeDeleteHooks []ArtistInfoHook
var artistInfoAfterDeleteMu sync.Mutex
var artistInfoAfterDeleteHooks []ArtistInfoHook

var artistInfoBeforeUpsertMu sync.Mutex
var artistInfoBeforeUpsertHooks []ArtistInfoHook
var artistInfoAfterUpsertMu sync.Mutex
var artistInfoAfterUpsertHooks []ArtistInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ArtistInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ArtistInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ArtistInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ArtistInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ArtistInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ArtistInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ArtistInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ArtistInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ArtistInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtistInfoHook registers your hook function for all future operations.
func AddArtistInfoHook(hookPoint boil.HookPoint, artistInfoHook ArtistInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		artistInfoAfterSelectMu.Lock()
		artistInfoAfterSelectHooks = append(artistInfoAfterSelectHooks, artistInfoHook)
		artistInfoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		artistInfoBeforeInsertMu.Lock()
		artistInfoBeforeInsertHooks = append(artistInfoBeforeInsertHooks, artistInfoHook)
		artistInfoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		artistInfoAfterInsertMu.Lock()
		artistInfoAfterInsertHooks = append(artistInfoAfterInsertHooks, artistInfoHook)
		artistInfoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		artistInfoBeforeUpdateMu.Lock()
		artistInfoBeforeUpdateHooks = append(artistInfoBeforeUpdateHooks, artistInfoHook)
		artistInfoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		artistInfoAfterUpdateMu.Lock()
		artistInfoAfterUpdateHooks = append(artistInfoAfterUpdateHooks, artistInfoHook)
		artistInfoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		artistInfoBeforeDeleteMu.Lock()
		artistInfoBeforeDeleteHooks = append(artistInfoBeforeDeleteHooks, artistInfoHook)
		artistInfoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		artistInfoAfterDeleteMu.Lock()
		artistInfoAfterDeleteHooks = append(artistInfoAfterDeleteHooks, artistInfoHook)
		artistInfoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		artistInfoBeforeUpsertMu.Lock()
		artistInfoBeforeUpsertHooks = append(artistInfoBeforeUpsertHooks, artistInfoHook)
		artistInfoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		artistInfoAfterUpsertMu.Lock()
		artistInfoAfterUpsertHooks = append(artistInfoAfterUpsertHooks, artistInfoHook)
		artistInfoAfterUpsertMu.Unlock()
	}
}

// One returns a single artistInfo record from the query.
func (q artistInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ArtistInfo, error) {
	o := &ArtistInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for artistInfo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ArtistInfo records from the query.
func (q artistInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtistInfoSlice, error) {
	var o []*ArtistInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to ArtistInfo slice")
	}

	if len(artistInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ArtistInfo records in the query.
func (q artistInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count artistInfo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q artistInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if artistInfo exists")
	}

	return count > 0, nil
}

// ArtistInfos retrieves all the records using an executor.
func ArtistInfos(mods ...qm.QueryMod) artistInfoQuery {
	mods = append(mods, qm.From("`artistInfo`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`artistInfo`.*"})
	}

	return artistInfoQuery{q}
}

// FindArtistInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArtistInfo(ctx context.Context, exec boil.ContextExecutor, artistId int64, selectCols ...string) (*ArtistInfo, error) {
	artistInfoObj := &ArtistInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `artistInfo` where `artistId`=?", sel,
	)

	q := queries.Raw(query, artistId)

	err := q.Bind(ctx, exec, artistInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from artistInfo")
	}

	if err = artistInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artistInfoObj, err
	}

	return artistInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArtistInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no artistInfo provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artistInfoInsertCacheMut.RLock()
	cache, cached := artistInfoInsertCache[key]
	artistInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artistInfoAllColumns,
			artistInfoColumnsWithDefault,
			artistInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artistInfoType, artistInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artistInfoType, artistInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `artistInfo` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `artistInfo` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `artistInfo` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, artistInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into artistInfo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ArtistId = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == artistInfoMapping["artistId"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ArtistId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for artistInfo")
	}

CacheNoHooks:
	if !cached {
		artistInfoInsertCacheMut.Lock()
		artistInfoInsertCache[key] = cache
		artistInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ArtistInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArtistInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artistInfoUpdateCacheMut.RLock()
	cache, cached := artistInfoUpdateCache[key]
	artistInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artistInfoAllColumns,
			artistInfoPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update artistInfo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `artistInfo` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, artistInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artistInfoType, artistInfoMapping, append(wl, artistInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update artistInfo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for artistInfo")
	}

	if !cached {
		artistInfoUpdateCacheMut.Lock()
		artistInfoUpdateCache[key] = cache
		artistInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q artistInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for artistInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for artistInfo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtistInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `artistInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in artistInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all artistInfo")
	}
	return rowsAff, nil
}

var mySQLArtistInfoUniqueColumns = []string{
	"artistId",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArtistInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no artistInfo provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLArtistInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artistInfoUpsertCacheMut.RLock()
	cache, cached := artistInfoUpsertCache[key]
	artistInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			artistInfoAllColumns,
			artistInfoColumnsWithDefault,
			artistInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			artistInfoAllColumns,
			artistInfoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert artistInfo, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`artistInfo`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `artistInfo` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(artistInfoType, artistInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artistInfoType, artistInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for artistInfo")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ArtistId = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == artistInfoMapping["artistId"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(artistInfoType, artistInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for artistInfo")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for artistInfo")
	}

CacheNoHooks:
	if !cached {
		artistInfoUpsertCacheMut.Lock()
		artistInfoUpsertCache[key] = cache
		artistInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ArtistInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArtistInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no ArtistInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artistInfoPrimaryKeyMapping)
	sql := "DELETE FROM `artistInfo` WHERE `artistId`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from artistInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for artistInfo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q artistInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no artistInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from artistInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for artistInfo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtistInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artistInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `artistInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from artistInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for artistInfo")
	}

	if len(artistInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArtistInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArtistInfo(ctx, exec, o.ArtistId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtistInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtistInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `artistInfo`.* FROM `artistInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in ArtistInfoSlice")
	}

	*o = slice

	return nil
}

// ArtistInfoExists checks if the ArtistInfo row exists.
func ArtistInfoExists(ctx context.Context, exec boil.ContextExecutor, artistId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `artistInfo` where `artistId`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, artistId)
	}
	row := exec.QueryRowContext(ctx, sql, artistId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if artistInfo exists")
	}

	return exists, nil
}

// Exists checks if the ArtistInfo row exists.
func (o *ArtistInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ArtistInfoExists(ctx, exec, o.ArtistId)
}
