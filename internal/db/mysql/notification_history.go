// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationHistory is an object representing the database table.
type NotificationHistory struct {
	NotificationHistoryID int64       `boil:"notification_history_id" json:"notification_history_id" toml:"notification_history_id" yaml:"notification_history_id"`
	MemberID              int64       `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Title                 string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Body                  string      `boil:"body" json:"body" toml:"body" yaml:"body"`
	ScreenType            null.String `boil:"screen_type" json:"screen_type,omitempty" toml:"screen_type" yaml:"screen_type,omitempty"`
	ScreenTypeID          null.Int64  `boil:"screen_type_id" json:"screen_type_id,omitempty" toml:"screen_type_id" yaml:"screen_type_id,omitempty"`
	IsRead                null.Bool   `boil:"is_read" json:"is_read,omitempty" toml:"is_read" yaml:"is_read,omitempty"`
	CreatedAt             null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt             null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt             null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *notificationHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationHistoryColumns = struct {
	NotificationHistoryID string
	MemberID              string
	Title                 string
	Body                  string
	ScreenType            string
	ScreenTypeID          string
	IsRead                string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	NotificationHistoryID: "notification_history_id",
	MemberID:              "member_id",
	Title:                 "title",
	Body:                  "body",
	ScreenType:            "screen_type",
	ScreenTypeID:          "screen_type_id",
	IsRead:                "is_read",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	DeletedAt:             "deleted_at",
}

var NotificationHistoryTableColumns = struct {
	NotificationHistoryID string
	MemberID              string
	Title                 string
	Body                  string
	ScreenType            string
	ScreenTypeID          string
	IsRead                string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	NotificationHistoryID: "notification_history.notification_history_id",
	MemberID:              "notification_history.member_id",
	Title:                 "notification_history.title",
	Body:                  "notification_history.body",
	ScreenType:            "notification_history.screen_type",
	ScreenTypeID:          "notification_history.screen_type_id",
	IsRead:                "notification_history.is_read",
	CreatedAt:             "notification_history.created_at",
	UpdatedAt:             "notification_history.updated_at",
	DeletedAt:             "notification_history.deleted_at",
}

// Generated where

var NotificationHistoryWhere = struct {
	NotificationHistoryID whereHelperint64
	MemberID              whereHelperint64
	Title                 whereHelperstring
	Body                  whereHelperstring
	ScreenType            whereHelpernull_String
	ScreenTypeID          whereHelpernull_Int64
	IsRead                whereHelpernull_Bool
	CreatedAt             whereHelpernull_Time
	UpdatedAt             whereHelpernull_Time
	DeletedAt             whereHelpernull_Time
}{
	NotificationHistoryID: whereHelperint64{field: "`notification_history`.`notification_history_id`"},
	MemberID:              whereHelperint64{field: "`notification_history`.`member_id`"},
	Title:                 whereHelperstring{field: "`notification_history`.`title`"},
	Body:                  whereHelperstring{field: "`notification_history`.`body`"},
	ScreenType:            whereHelpernull_String{field: "`notification_history`.`screen_type`"},
	ScreenTypeID:          whereHelpernull_Int64{field: "`notification_history`.`screen_type_id`"},
	IsRead:                whereHelpernull_Bool{field: "`notification_history`.`is_read`"},
	CreatedAt:             whereHelpernull_Time{field: "`notification_history`.`created_at`"},
	UpdatedAt:             whereHelpernull_Time{field: "`notification_history`.`updated_at`"},
	DeletedAt:             whereHelpernull_Time{field: "`notification_history`.`deleted_at`"},
}

// NotificationHistoryRels is where relationship names are stored.
var NotificationHistoryRels = struct {
}{}

// notificationHistoryR is where relationships are stored.
type notificationHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*notificationHistoryR) NewStruct() *notificationHistoryR {
	return &notificationHistoryR{}
}

// notificationHistoryL is where Load methods for each relationship are stored.
type notificationHistoryL struct{}

var (
	notificationHistoryAllColumns            = []string{"notification_history_id", "member_id", "title", "body", "screen_type", "screen_type_id", "is_read", "created_at", "updated_at", "deleted_at"}
	notificationHistoryColumnsWithoutDefault = []string{"member_id", "title", "body", "screen_type", "screen_type_id", "deleted_at"}
	notificationHistoryColumnsWithDefault    = []string{"notification_history_id", "is_read", "created_at", "updated_at"}
	notificationHistoryPrimaryKeyColumns     = []string{"notification_history_id"}
	notificationHistoryGeneratedColumns      = []string{}
)

type (
	// NotificationHistorySlice is an alias for a slice of pointers to NotificationHistory.
	// This should almost always be used instead of []NotificationHistory.
	NotificationHistorySlice []*NotificationHistory
	// NotificationHistoryHook is the signature for custom NotificationHistory hook methods
	NotificationHistoryHook func(context.Context, boil.ContextExecutor, *NotificationHistory) error

	notificationHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationHistoryType                 = reflect.TypeOf(&NotificationHistory{})
	notificationHistoryMapping              = queries.MakeStructMapping(notificationHistoryType)
	notificationHistoryPrimaryKeyMapping, _ = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, notificationHistoryPrimaryKeyColumns)
	notificationHistoryInsertCacheMut       sync.RWMutex
	notificationHistoryInsertCache          = make(map[string]insertCache)
	notificationHistoryUpdateCacheMut       sync.RWMutex
	notificationHistoryUpdateCache          = make(map[string]updateCache)
	notificationHistoryUpsertCacheMut       sync.RWMutex
	notificationHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationHistoryAfterSelectHooks []NotificationHistoryHook

var notificationHistoryBeforeInsertHooks []NotificationHistoryHook
var notificationHistoryAfterInsertHooks []NotificationHistoryHook

var notificationHistoryBeforeUpdateHooks []NotificationHistoryHook
var notificationHistoryAfterUpdateHooks []NotificationHistoryHook

var notificationHistoryBeforeDeleteHooks []NotificationHistoryHook
var notificationHistoryAfterDeleteHooks []NotificationHistoryHook

var notificationHistoryBeforeUpsertHooks []NotificationHistoryHook
var notificationHistoryAfterUpsertHooks []NotificationHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationHistoryHook registers your hook function for all future operations.
func AddNotificationHistoryHook(hookPoint boil.HookPoint, notificationHistoryHook NotificationHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		notificationHistoryAfterSelectHooks = append(notificationHistoryAfterSelectHooks, notificationHistoryHook)
	case boil.BeforeInsertHook:
		notificationHistoryBeforeInsertHooks = append(notificationHistoryBeforeInsertHooks, notificationHistoryHook)
	case boil.AfterInsertHook:
		notificationHistoryAfterInsertHooks = append(notificationHistoryAfterInsertHooks, notificationHistoryHook)
	case boil.BeforeUpdateHook:
		notificationHistoryBeforeUpdateHooks = append(notificationHistoryBeforeUpdateHooks, notificationHistoryHook)
	case boil.AfterUpdateHook:
		notificationHistoryAfterUpdateHooks = append(notificationHistoryAfterUpdateHooks, notificationHistoryHook)
	case boil.BeforeDeleteHook:
		notificationHistoryBeforeDeleteHooks = append(notificationHistoryBeforeDeleteHooks, notificationHistoryHook)
	case boil.AfterDeleteHook:
		notificationHistoryAfterDeleteHooks = append(notificationHistoryAfterDeleteHooks, notificationHistoryHook)
	case boil.BeforeUpsertHook:
		notificationHistoryBeforeUpsertHooks = append(notificationHistoryBeforeUpsertHooks, notificationHistoryHook)
	case boil.AfterUpsertHook:
		notificationHistoryAfterUpsertHooks = append(notificationHistoryAfterUpsertHooks, notificationHistoryHook)
	}
}

// One returns a single notificationHistory record from the query.
func (q notificationHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationHistory, error) {
	o := &NotificationHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for notification_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationHistory records from the query.
func (q notificationHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationHistorySlice, error) {
	var o []*NotificationHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to NotificationHistory slice")
	}

	if len(notificationHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationHistory records in the query.
func (q notificationHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count notification_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if notification_history exists")
	}

	return count > 0, nil
}

// NotificationHistories retrieves all the records using an executor.
func NotificationHistories(mods ...qm.QueryMod) notificationHistoryQuery {
	mods = append(mods, qm.From("`notification_history`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`notification_history`.*"})
	}

	return notificationHistoryQuery{q}
}

// FindNotificationHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationHistory(ctx context.Context, exec boil.ContextExecutor, notificationHistoryID int64, selectCols ...string) (*NotificationHistory, error) {
	notificationHistoryObj := &NotificationHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notification_history` where `notification_history_id`=?", sel,
	)

	q := queries.Raw(query, notificationHistoryID)

	err := q.Bind(ctx, exec, notificationHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from notification_history")
	}

	if err = notificationHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationHistoryObj, err
	}

	return notificationHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no notification_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationHistoryInsertCacheMut.RLock()
	cache, cached := notificationHistoryInsertCache[key]
	notificationHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationHistoryAllColumns,
			notificationHistoryColumnsWithDefault,
			notificationHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notification_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notification_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notification_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, notificationHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into notification_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.NotificationHistoryID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == notificationHistoryMapping["notification_history_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NotificationHistoryID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for notification_history")
	}

CacheNoHooks:
	if !cached {
		notificationHistoryInsertCacheMut.Lock()
		notificationHistoryInsertCache[key] = cache
		notificationHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationHistoryUpdateCacheMut.RLock()
	cache, cached := notificationHistoryUpdateCache[key]
	notificationHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationHistoryAllColumns,
			notificationHistoryPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update notification_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notification_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, notificationHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, append(wl, notificationHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update notification_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for notification_history")
	}

	if !cached {
		notificationHistoryUpdateCacheMut.Lock()
		notificationHistoryUpdateCache[key] = cache
		notificationHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for notification_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for notification_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notification_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in notificationHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all notificationHistory")
	}
	return rowsAff, nil
}

var mySQLNotificationHistoryUniqueColumns = []string{
	"notification_history_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no notification_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNotificationHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationHistoryUpsertCacheMut.RLock()
	cache, cached := notificationHistoryUpsertCache[key]
	notificationHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			notificationHistoryAllColumns,
			notificationHistoryColumnsWithDefault,
			notificationHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			notificationHistoryAllColumns,
			notificationHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert notification_history, could not build update column list")
		}

		ret := strmangle.SetComplement(notificationHistoryAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`notification_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notification_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for notification_history")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.NotificationHistoryID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == notificationHistoryMapping["notification_history_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(notificationHistoryType, notificationHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for notification_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for notification_history")
	}

CacheNoHooks:
	if !cached {
		notificationHistoryUpsertCacheMut.Lock()
		notificationHistoryUpsertCache[key] = cache
		notificationHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NotificationHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no NotificationHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `notification_history` WHERE `notification_history_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from notification_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for notification_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no notificationHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from notification_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for notification_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notification_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from notificationHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for notification_history")
	}

	if len(notificationHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationHistory(ctx, exec, o.NotificationHistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notification_history`.* FROM `notification_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in NotificationHistorySlice")
	}

	*o = slice

	return nil
}

// NotificationHistoryExists checks if the NotificationHistory row exists.
func NotificationHistoryExists(ctx context.Context, exec boil.ContextExecutor, notificationHistoryID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notification_history` where `notification_history_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, notificationHistoryID)
	}
	row := exec.QueryRowContext(ctx, sql, notificationHistoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if notification_history exists")
	}

	return exists, nil
}

// Exists checks if the NotificationHistory row exists.
func (o *NotificationHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NotificationHistoryExists(ctx, exec, o.NotificationHistoryID)
}
