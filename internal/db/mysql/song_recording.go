// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SongRecording is an object representing the database table.
type SongRecording struct {
	SongRecordingID int64       `boil:"song_recording_id" json:"song_recording_id" toml:"song_recording_id" yaml:"song_recording_id"`
	SongInfoID      int64       `boil:"song_info_id" json:"song_info_id" toml:"song_info_id" yaml:"song_info_id"`
	MemberID        int64       `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	RecordingLink   string      `boil:"recording_link" json:"recording_link" toml:"recording_link" yaml:"recording_link"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Title           string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	IsPublic        null.Bool   `boil:"is_public" json:"is_public,omitempty" toml:"is_public" yaml:"is_public,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt       null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *songRecordingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songRecordingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongRecordingColumns = struct {
	SongRecordingID string
	SongInfoID      string
	MemberID        string
	RecordingLink   string
	Description     string
	Title           string
	IsPublic        string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	SongRecordingID: "song_recording_id",
	SongInfoID:      "song_info_id",
	MemberID:        "member_id",
	RecordingLink:   "recording_link",
	Description:     "description",
	Title:           "title",
	IsPublic:        "is_public",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

var SongRecordingTableColumns = struct {
	SongRecordingID string
	SongInfoID      string
	MemberID        string
	RecordingLink   string
	Description     string
	Title           string
	IsPublic        string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	SongRecordingID: "song_recording.song_recording_id",
	SongInfoID:      "song_recording.song_info_id",
	MemberID:        "song_recording.member_id",
	RecordingLink:   "song_recording.recording_link",
	Description:     "song_recording.description",
	Title:           "song_recording.title",
	IsPublic:        "song_recording.is_public",
	CreatedAt:       "song_recording.created_at",
	UpdatedAt:       "song_recording.updated_at",
	DeletedAt:       "song_recording.deleted_at",
}

// Generated where

var SongRecordingWhere = struct {
	SongRecordingID whereHelperint64
	SongInfoID      whereHelperint64
	MemberID        whereHelperint64
	RecordingLink   whereHelperstring
	Description     whereHelpernull_String
	Title           whereHelperstring
	IsPublic        whereHelpernull_Bool
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
	DeletedAt       whereHelpernull_Time
}{
	SongRecordingID: whereHelperint64{field: "`song_recording`.`song_recording_id`"},
	SongInfoID:      whereHelperint64{field: "`song_recording`.`song_info_id`"},
	MemberID:        whereHelperint64{field: "`song_recording`.`member_id`"},
	RecordingLink:   whereHelperstring{field: "`song_recording`.`recording_link`"},
	Description:     whereHelpernull_String{field: "`song_recording`.`description`"},
	Title:           whereHelperstring{field: "`song_recording`.`title`"},
	IsPublic:        whereHelpernull_Bool{field: "`song_recording`.`is_public`"},
	CreatedAt:       whereHelpernull_Time{field: "`song_recording`.`created_at`"},
	UpdatedAt:       whereHelpernull_Time{field: "`song_recording`.`updated_at`"},
	DeletedAt:       whereHelpernull_Time{field: "`song_recording`.`deleted_at`"},
}

// SongRecordingRels is where relationship names are stored.
var SongRecordingRels = struct {
	SongInfo string
	Member   string
}{
	SongInfo: "SongInfo",
	Member:   "Member",
}

// songRecordingR is where relationships are stored.
type songRecordingR struct {
	SongInfo *SongInfo `boil:"SongInfo" json:"SongInfo" toml:"SongInfo" yaml:"SongInfo"`
	Member   *Member   `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
}

// NewStruct creates a new relationship struct
func (*songRecordingR) NewStruct() *songRecordingR {
	return &songRecordingR{}
}

func (r *songRecordingR) GetSongInfo() *SongInfo {
	if r == nil {
		return nil
	}
	return r.SongInfo
}

func (r *songRecordingR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

// songRecordingL is where Load methods for each relationship are stored.
type songRecordingL struct{}

var (
	songRecordingAllColumns            = []string{"song_recording_id", "song_info_id", "member_id", "recording_link", "description", "title", "is_public", "created_at", "updated_at", "deleted_at"}
	songRecordingColumnsWithoutDefault = []string{"song_info_id", "member_id", "recording_link", "description", "title", "deleted_at"}
	songRecordingColumnsWithDefault    = []string{"song_recording_id", "is_public", "created_at", "updated_at"}
	songRecordingPrimaryKeyColumns     = []string{"song_recording_id"}
	songRecordingGeneratedColumns      = []string{}
)

type (
	// SongRecordingSlice is an alias for a slice of pointers to SongRecording.
	// This should almost always be used instead of []SongRecording.
	SongRecordingSlice []*SongRecording
	// SongRecordingHook is the signature for custom SongRecording hook methods
	SongRecordingHook func(context.Context, boil.ContextExecutor, *SongRecording) error

	songRecordingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songRecordingType                 = reflect.TypeOf(&SongRecording{})
	songRecordingMapping              = queries.MakeStructMapping(songRecordingType)
	songRecordingPrimaryKeyMapping, _ = queries.BindMapping(songRecordingType, songRecordingMapping, songRecordingPrimaryKeyColumns)
	songRecordingInsertCacheMut       sync.RWMutex
	songRecordingInsertCache          = make(map[string]insertCache)
	songRecordingUpdateCacheMut       sync.RWMutex
	songRecordingUpdateCache          = make(map[string]updateCache)
	songRecordingUpsertCacheMut       sync.RWMutex
	songRecordingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var songRecordingAfterSelectHooks []SongRecordingHook

var songRecordingBeforeInsertHooks []SongRecordingHook
var songRecordingAfterInsertHooks []SongRecordingHook

var songRecordingBeforeUpdateHooks []SongRecordingHook
var songRecordingAfterUpdateHooks []SongRecordingHook

var songRecordingBeforeDeleteHooks []SongRecordingHook
var songRecordingAfterDeleteHooks []SongRecordingHook

var songRecordingBeforeUpsertHooks []SongRecordingHook
var songRecordingAfterUpsertHooks []SongRecordingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SongRecording) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SongRecording) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SongRecording) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SongRecording) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SongRecording) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SongRecording) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SongRecording) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SongRecording) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SongRecording) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRecordingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongRecordingHook registers your hook function for all future operations.
func AddSongRecordingHook(hookPoint boil.HookPoint, songRecordingHook SongRecordingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		songRecordingAfterSelectHooks = append(songRecordingAfterSelectHooks, songRecordingHook)
	case boil.BeforeInsertHook:
		songRecordingBeforeInsertHooks = append(songRecordingBeforeInsertHooks, songRecordingHook)
	case boil.AfterInsertHook:
		songRecordingAfterInsertHooks = append(songRecordingAfterInsertHooks, songRecordingHook)
	case boil.BeforeUpdateHook:
		songRecordingBeforeUpdateHooks = append(songRecordingBeforeUpdateHooks, songRecordingHook)
	case boil.AfterUpdateHook:
		songRecordingAfterUpdateHooks = append(songRecordingAfterUpdateHooks, songRecordingHook)
	case boil.BeforeDeleteHook:
		songRecordingBeforeDeleteHooks = append(songRecordingBeforeDeleteHooks, songRecordingHook)
	case boil.AfterDeleteHook:
		songRecordingAfterDeleteHooks = append(songRecordingAfterDeleteHooks, songRecordingHook)
	case boil.BeforeUpsertHook:
		songRecordingBeforeUpsertHooks = append(songRecordingBeforeUpsertHooks, songRecordingHook)
	case boil.AfterUpsertHook:
		songRecordingAfterUpsertHooks = append(songRecordingAfterUpsertHooks, songRecordingHook)
	}
}

// One returns a single songRecording record from the query.
func (q songRecordingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SongRecording, error) {
	o := &SongRecording{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for song_recording")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SongRecording records from the query.
func (q songRecordingQuery) All(ctx context.Context, exec boil.ContextExecutor) (SongRecordingSlice, error) {
	var o []*SongRecording

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to SongRecording slice")
	}

	if len(songRecordingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SongRecording records in the query.
func (q songRecordingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count song_recording rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q songRecordingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if song_recording exists")
	}

	return count > 0, nil
}

// SongInfo pointed to by the foreign key.
func (o *SongRecording) SongInfo(mods ...qm.QueryMod) songInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`song_info_id` = ?", o.SongInfoID),
	}

	queryMods = append(queryMods, mods...)

	return SongInfos(queryMods...)
}

// Member pointed to by the foreign key.
func (o *SongRecording) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// LoadSongInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (songRecordingL) LoadSongInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSongRecording interface{}, mods queries.Applicator) error {
	var slice []*SongRecording
	var object *SongRecording

	if singular {
		var ok bool
		object, ok = maybeSongRecording.(*SongRecording)
		if !ok {
			object = new(SongRecording)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSongRecording)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSongRecording))
			}
		}
	} else {
		s, ok := maybeSongRecording.(*[]*SongRecording)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSongRecording)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSongRecording))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songRecordingR{}
		}
		args = append(args, object.SongInfoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songRecordingR{}
			}

			for _, a := range args {
				if a == obj.SongInfoID {
					continue Outer
				}
			}

			args = append(args, obj.SongInfoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`song_info`),
		qm.WhereIn(`song_info.song_info_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SongInfo")
	}

	var resultSlice []*SongInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SongInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for song_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for song_info")
	}

	if len(songInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SongInfo = foreign
		if foreign.R == nil {
			foreign.R = &songInfoR{}
		}
		foreign.R.SongRecordings = append(foreign.R.SongRecordings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SongInfoID == foreign.SongInfoID {
				local.R.SongInfo = foreign
				if foreign.R == nil {
					foreign.R = &songInfoR{}
				}
				foreign.R.SongRecordings = append(foreign.R.SongRecordings, local)
				break
			}
		}
	}

	return nil
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (songRecordingL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSongRecording interface{}, mods queries.Applicator) error {
	var slice []*SongRecording
	var object *SongRecording

	if singular {
		var ok bool
		object, ok = maybeSongRecording.(*SongRecording)
		if !ok {
			object = new(SongRecording)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSongRecording)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSongRecording))
			}
		}
	} else {
		s, ok := maybeSongRecording.(*[]*SongRecording)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSongRecording)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSongRecording))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songRecordingR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songRecordingR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.SongRecordings = append(foreign.R.SongRecordings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.SongRecordings = append(foreign.R.SongRecordings, local)
				break
			}
		}
	}

	return nil
}

// SetSongInfo of the songRecording to the related item.
// Sets o.R.SongInfo to related.
// Adds o to related.R.SongRecordings.
func (o *SongRecording) SetSongInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SongInfo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `song_recording` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"song_info_id"}),
		strmangle.WhereClause("`", "`", 0, songRecordingPrimaryKeyColumns),
	)
	values := []interface{}{related.SongInfoID, o.SongRecordingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SongInfoID = related.SongInfoID
	if o.R == nil {
		o.R = &songRecordingR{
			SongInfo: related,
		}
	} else {
		o.R.SongInfo = related
	}

	if related.R == nil {
		related.R = &songInfoR{
			SongRecordings: SongRecordingSlice{o},
		}
	} else {
		related.R.SongRecordings = append(related.R.SongRecordings, o)
	}

	return nil
}

// SetMember of the songRecording to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.SongRecordings.
func (o *SongRecording) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `song_recording` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, songRecordingPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.SongRecordingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &songRecordingR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			SongRecordings: SongRecordingSlice{o},
		}
	} else {
		related.R.SongRecordings = append(related.R.SongRecordings, o)
	}

	return nil
}

// SongRecordings retrieves all the records using an executor.
func SongRecordings(mods ...qm.QueryMod) songRecordingQuery {
	mods = append(mods, qm.From("`song_recording`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`song_recording`.*"})
	}

	return songRecordingQuery{q}
}

// FindSongRecording retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSongRecording(ctx context.Context, exec boil.ContextExecutor, songRecordingID int64, selectCols ...string) (*SongRecording, error) {
	songRecordingObj := &SongRecording{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `song_recording` where `song_recording_id`=?", sel,
	)

	q := queries.Raw(query, songRecordingID)

	err := q.Bind(ctx, exec, songRecordingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from song_recording")
	}

	if err = songRecordingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return songRecordingObj, err
	}

	return songRecordingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SongRecording) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no song_recording provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songRecordingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	songRecordingInsertCacheMut.RLock()
	cache, cached := songRecordingInsertCache[key]
	songRecordingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			songRecordingAllColumns,
			songRecordingColumnsWithDefault,
			songRecordingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(songRecordingType, songRecordingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songRecordingType, songRecordingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `song_recording` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `song_recording` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `song_recording` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, songRecordingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into song_recording")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SongRecordingID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songRecordingMapping["song_recording_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SongRecordingID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for song_recording")
	}

CacheNoHooks:
	if !cached {
		songRecordingInsertCacheMut.Lock()
		songRecordingInsertCache[key] = cache
		songRecordingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SongRecording.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SongRecording) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	songRecordingUpdateCacheMut.RLock()
	cache, cached := songRecordingUpdateCache[key]
	songRecordingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			songRecordingAllColumns,
			songRecordingPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update song_recording, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `song_recording` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, songRecordingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songRecordingType, songRecordingMapping, append(wl, songRecordingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update song_recording row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for song_recording")
	}

	if !cached {
		songRecordingUpdateCacheMut.Lock()
		songRecordingUpdateCache[key] = cache
		songRecordingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q songRecordingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for song_recording")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for song_recording")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongRecordingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songRecordingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `song_recording` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songRecordingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in songRecording slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all songRecording")
	}
	return rowsAff, nil
}

var mySQLSongRecordingUniqueColumns = []string{
	"song_recording_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SongRecording) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no song_recording provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songRecordingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSongRecordingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songRecordingUpsertCacheMut.RLock()
	cache, cached := songRecordingUpsertCache[key]
	songRecordingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			songRecordingAllColumns,
			songRecordingColumnsWithDefault,
			songRecordingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			songRecordingAllColumns,
			songRecordingPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert song_recording, could not build update column list")
		}

		ret := strmangle.SetComplement(songRecordingAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`song_recording`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `song_recording` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(songRecordingType, songRecordingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songRecordingType, songRecordingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for song_recording")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SongRecordingID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songRecordingMapping["song_recording_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(songRecordingType, songRecordingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for song_recording")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for song_recording")
	}

CacheNoHooks:
	if !cached {
		songRecordingUpsertCacheMut.Lock()
		songRecordingUpsertCache[key] = cache
		songRecordingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SongRecording record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SongRecording) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no SongRecording provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songRecordingPrimaryKeyMapping)
	sql := "DELETE FROM `song_recording` WHERE `song_recording_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from song_recording")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for song_recording")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q songRecordingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no songRecordingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from song_recording")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for song_recording")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongRecordingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(songRecordingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songRecordingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `song_recording` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songRecordingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from songRecording slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for song_recording")
	}

	if len(songRecordingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SongRecording) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSongRecording(ctx, exec, o.SongRecordingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongRecordingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SongRecordingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songRecordingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `song_recording`.* FROM `song_recording` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songRecordingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in SongRecordingSlice")
	}

	*o = slice

	return nil
}

// SongRecordingExists checks if the SongRecording row exists.
func SongRecordingExists(ctx context.Context, exec boil.ContextExecutor, songRecordingID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `song_recording` where `song_recording_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, songRecordingID)
	}
	row := exec.QueryRowContext(ctx, sql, songRecordingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if song_recording exists")
	}

	return exists, nil
}

// Exists checks if the SongRecording row exists.
func (o *SongRecording) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SongRecordingExists(ctx, exec, o.SongRecordingID)
}
