// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostCommentReport is an object representing the database table.
type PostCommentReport struct {
	PostCommentReportID int64       `boil:"post_comment_report_id" json:"post_comment_report_id" toml:"post_comment_report_id" yaml:"post_comment_report_id"`
	ReporterMemberID    int64       `boil:"reporter_member_id" json:"reporter_member_id" toml:"reporter_member_id" yaml:"reporter_member_id"`
	SubjectMemberID     int64       `boil:"subject_member_id" json:"subject_member_id" toml:"subject_member_id" yaml:"subject_member_id"`
	PostCommentID       int64       `boil:"post_comment_id" json:"post_comment_id" toml:"post_comment_id" yaml:"post_comment_id"`
	ReportReason        null.String `boil:"report_reason" json:"report_reason,omitempty" toml:"report_reason" yaml:"report_reason,omitempty"`
	CreatedAt           null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt           null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt           null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *postCommentReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postCommentReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostCommentReportColumns = struct {
	PostCommentReportID string
	ReporterMemberID    string
	SubjectMemberID     string
	PostCommentID       string
	ReportReason        string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	PostCommentReportID: "post_comment_report_id",
	ReporterMemberID:    "reporter_member_id",
	SubjectMemberID:     "subject_member_id",
	PostCommentID:       "post_comment_id",
	ReportReason:        "report_reason",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var PostCommentReportTableColumns = struct {
	PostCommentReportID string
	ReporterMemberID    string
	SubjectMemberID     string
	PostCommentID       string
	ReportReason        string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	PostCommentReportID: "post_comment_report.post_comment_report_id",
	ReporterMemberID:    "post_comment_report.reporter_member_id",
	SubjectMemberID:     "post_comment_report.subject_member_id",
	PostCommentID:       "post_comment_report.post_comment_id",
	ReportReason:        "post_comment_report.report_reason",
	CreatedAt:           "post_comment_report.created_at",
	UpdatedAt:           "post_comment_report.updated_at",
	DeletedAt:           "post_comment_report.deleted_at",
}

// Generated where

var PostCommentReportWhere = struct {
	PostCommentReportID whereHelperint64
	ReporterMemberID    whereHelperint64
	SubjectMemberID     whereHelperint64
	PostCommentID       whereHelperint64
	ReportReason        whereHelpernull_String
	CreatedAt           whereHelpernull_Time
	UpdatedAt           whereHelpernull_Time
	DeletedAt           whereHelpernull_Time
}{
	PostCommentReportID: whereHelperint64{field: "`post_comment_report`.`post_comment_report_id`"},
	ReporterMemberID:    whereHelperint64{field: "`post_comment_report`.`reporter_member_id`"},
	SubjectMemberID:     whereHelperint64{field: "`post_comment_report`.`subject_member_id`"},
	PostCommentID:       whereHelperint64{field: "`post_comment_report`.`post_comment_id`"},
	ReportReason:        whereHelpernull_String{field: "`post_comment_report`.`report_reason`"},
	CreatedAt:           whereHelpernull_Time{field: "`post_comment_report`.`created_at`"},
	UpdatedAt:           whereHelpernull_Time{field: "`post_comment_report`.`updated_at`"},
	DeletedAt:           whereHelpernull_Time{field: "`post_comment_report`.`deleted_at`"},
}

// PostCommentReportRels is where relationship names are stored.
var PostCommentReportRels = struct {
}{}

// postCommentReportR is where relationships are stored.
type postCommentReportR struct {
}

// NewStruct creates a new relationship struct
func (*postCommentReportR) NewStruct() *postCommentReportR {
	return &postCommentReportR{}
}

// postCommentReportL is where Load methods for each relationship are stored.
type postCommentReportL struct{}

var (
	postCommentReportAllColumns            = []string{"post_comment_report_id", "reporter_member_id", "subject_member_id", "post_comment_id", "report_reason", "created_at", "updated_at", "deleted_at"}
	postCommentReportColumnsWithoutDefault = []string{"reporter_member_id", "subject_member_id", "post_comment_id", "report_reason", "deleted_at"}
	postCommentReportColumnsWithDefault    = []string{"post_comment_report_id", "created_at", "updated_at"}
	postCommentReportPrimaryKeyColumns     = []string{"post_comment_report_id"}
	postCommentReportGeneratedColumns      = []string{}
)

type (
	// PostCommentReportSlice is an alias for a slice of pointers to PostCommentReport.
	// This should almost always be used instead of []PostCommentReport.
	PostCommentReportSlice []*PostCommentReport
	// PostCommentReportHook is the signature for custom PostCommentReport hook methods
	PostCommentReportHook func(context.Context, boil.ContextExecutor, *PostCommentReport) error

	postCommentReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postCommentReportType                 = reflect.TypeOf(&PostCommentReport{})
	postCommentReportMapping              = queries.MakeStructMapping(postCommentReportType)
	postCommentReportPrimaryKeyMapping, _ = queries.BindMapping(postCommentReportType, postCommentReportMapping, postCommentReportPrimaryKeyColumns)
	postCommentReportInsertCacheMut       sync.RWMutex
	postCommentReportInsertCache          = make(map[string]insertCache)
	postCommentReportUpdateCacheMut       sync.RWMutex
	postCommentReportUpdateCache          = make(map[string]updateCache)
	postCommentReportUpsertCacheMut       sync.RWMutex
	postCommentReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postCommentReportAfterSelectHooks []PostCommentReportHook

var postCommentReportBeforeInsertHooks []PostCommentReportHook
var postCommentReportAfterInsertHooks []PostCommentReportHook

var postCommentReportBeforeUpdateHooks []PostCommentReportHook
var postCommentReportAfterUpdateHooks []PostCommentReportHook

var postCommentReportBeforeDeleteHooks []PostCommentReportHook
var postCommentReportAfterDeleteHooks []PostCommentReportHook

var postCommentReportBeforeUpsertHooks []PostCommentReportHook
var postCommentReportAfterUpsertHooks []PostCommentReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostCommentReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostCommentReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostCommentReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostCommentReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostCommentReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostCommentReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostCommentReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostCommentReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostCommentReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCommentReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostCommentReportHook registers your hook function for all future operations.
func AddPostCommentReportHook(hookPoint boil.HookPoint, postCommentReportHook PostCommentReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postCommentReportAfterSelectHooks = append(postCommentReportAfterSelectHooks, postCommentReportHook)
	case boil.BeforeInsertHook:
		postCommentReportBeforeInsertHooks = append(postCommentReportBeforeInsertHooks, postCommentReportHook)
	case boil.AfterInsertHook:
		postCommentReportAfterInsertHooks = append(postCommentReportAfterInsertHooks, postCommentReportHook)
	case boil.BeforeUpdateHook:
		postCommentReportBeforeUpdateHooks = append(postCommentReportBeforeUpdateHooks, postCommentReportHook)
	case boil.AfterUpdateHook:
		postCommentReportAfterUpdateHooks = append(postCommentReportAfterUpdateHooks, postCommentReportHook)
	case boil.BeforeDeleteHook:
		postCommentReportBeforeDeleteHooks = append(postCommentReportBeforeDeleteHooks, postCommentReportHook)
	case boil.AfterDeleteHook:
		postCommentReportAfterDeleteHooks = append(postCommentReportAfterDeleteHooks, postCommentReportHook)
	case boil.BeforeUpsertHook:
		postCommentReportBeforeUpsertHooks = append(postCommentReportBeforeUpsertHooks, postCommentReportHook)
	case boil.AfterUpsertHook:
		postCommentReportAfterUpsertHooks = append(postCommentReportAfterUpsertHooks, postCommentReportHook)
	}
}

// One returns a single postCommentReport record from the query.
func (q postCommentReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostCommentReport, error) {
	o := &PostCommentReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for post_comment_report")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostCommentReport records from the query.
func (q postCommentReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostCommentReportSlice, error) {
	var o []*PostCommentReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to PostCommentReport slice")
	}

	if len(postCommentReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostCommentReport records in the query.
func (q postCommentReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count post_comment_report rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postCommentReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if post_comment_report exists")
	}

	return count > 0, nil
}

// PostCommentReports retrieves all the records using an executor.
func PostCommentReports(mods ...qm.QueryMod) postCommentReportQuery {
	mods = append(mods, qm.From("`post_comment_report`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`post_comment_report`.*"})
	}

	return postCommentReportQuery{q}
}

// FindPostCommentReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostCommentReport(ctx context.Context, exec boil.ContextExecutor, postCommentReportID int64, selectCols ...string) (*PostCommentReport, error) {
	postCommentReportObj := &PostCommentReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `post_comment_report` where `post_comment_report_id`=?", sel,
	)

	q := queries.Raw(query, postCommentReportID)

	err := q.Bind(ctx, exec, postCommentReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from post_comment_report")
	}

	if err = postCommentReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postCommentReportObj, err
	}

	return postCommentReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostCommentReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_comment_report provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postCommentReportInsertCacheMut.RLock()
	cache, cached := postCommentReportInsertCache[key]
	postCommentReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postCommentReportAllColumns,
			postCommentReportColumnsWithDefault,
			postCommentReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postCommentReportType, postCommentReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postCommentReportType, postCommentReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `post_comment_report` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `post_comment_report` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `post_comment_report` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, postCommentReportPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into post_comment_report")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostCommentReportID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postCommentReportMapping["post_comment_report_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PostCommentReportID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_comment_report")
	}

CacheNoHooks:
	if !cached {
		postCommentReportInsertCacheMut.Lock()
		postCommentReportInsertCache[key] = cache
		postCommentReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostCommentReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostCommentReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postCommentReportUpdateCacheMut.RLock()
	cache, cached := postCommentReportUpdateCache[key]
	postCommentReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postCommentReportAllColumns,
			postCommentReportPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update post_comment_report, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `post_comment_report` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, postCommentReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postCommentReportType, postCommentReportMapping, append(wl, postCommentReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update post_comment_report row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for post_comment_report")
	}

	if !cached {
		postCommentReportUpdateCacheMut.Lock()
		postCommentReportUpdateCache[key] = cache
		postCommentReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postCommentReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for post_comment_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for post_comment_report")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostCommentReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `post_comment_report` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in postCommentReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all postCommentReport")
	}
	return rowsAff, nil
}

var mySQLPostCommentReportUniqueColumns = []string{
	"post_comment_report_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostCommentReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no post_comment_report provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentReportColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPostCommentReportUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postCommentReportUpsertCacheMut.RLock()
	cache, cached := postCommentReportUpsertCache[key]
	postCommentReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postCommentReportAllColumns,
			postCommentReportColumnsWithDefault,
			postCommentReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postCommentReportAllColumns,
			postCommentReportPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert post_comment_report, could not build update column list")
		}

		ret := strmangle.SetComplement(postCommentReportAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`post_comment_report`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `post_comment_report` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(postCommentReportType, postCommentReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postCommentReportType, postCommentReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for post_comment_report")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PostCommentReportID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postCommentReportMapping["post_comment_report_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(postCommentReportType, postCommentReportMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for post_comment_report")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for post_comment_report")
	}

CacheNoHooks:
	if !cached {
		postCommentReportUpsertCacheMut.Lock()
		postCommentReportUpsertCache[key] = cache
		postCommentReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostCommentReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostCommentReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no PostCommentReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postCommentReportPrimaryKeyMapping)
	sql := "DELETE FROM `post_comment_report` WHERE `post_comment_report_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from post_comment_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for post_comment_report")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postCommentReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no postCommentReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from post_comment_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_comment_report")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostCommentReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postCommentReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `post_comment_report` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from postCommentReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for post_comment_report")
	}

	if len(postCommentReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostCommentReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostCommentReport(ctx, exec, o.PostCommentReportID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostCommentReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostCommentReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `post_comment_report`.* FROM `post_comment_report` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postCommentReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in PostCommentReportSlice")
	}

	*o = slice

	return nil
}

// PostCommentReportExists checks if the PostCommentReport row exists.
func PostCommentReportExists(ctx context.Context, exec boil.ContextExecutor, postCommentReportID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `post_comment_report` where `post_comment_report_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, postCommentReportID)
	}
	row := exec.QueryRowContext(ctx, sql, postCommentReportID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if post_comment_report exists")
	}

	return exists, nil
}

// Exists checks if the PostCommentReport row exists.
func (o *PostCommentReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostCommentReportExists(ctx, exec, o.PostCommentReportID)
}
